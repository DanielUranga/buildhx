{
    "project": {},
    "files": {
        "easeljs/display/Bitmap.js": {
            "name": "easeljs/display/Bitmap.js",
            "modules": {},
            "classes": {
                "Bitmap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/BitmapAnimation.js": {
            "name": "easeljs/display/BitmapAnimation.js",
            "modules": {},
            "classes": {
                "BitmapAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Container.js": {
            "name": "easeljs/display/Container.js",
            "modules": {},
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/DOMElement.js": {
            "name": "easeljs/display/DOMElement.js",
            "modules": {},
            "classes": {
                "DOMElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/DisplayObject.js": {
            "name": "easeljs/display/DisplayObject.js",
            "modules": {
                "EaselJS": 1
            },
            "classes": {
                "DisplayObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Graphics.js": {
            "name": "easeljs/display/Graphics.js",
            "modules": {},
            "classes": {
                "Command": 1,
                "Graphics": 1
            },
            "fors": {
                "Graphics": 1
            },
            "namespaces": {}
        },
        "easeljs/display/MovieClip.js": {
            "name": "easeljs/display/MovieClip.js",
            "modules": {},
            "classes": {
                "MovieClip": 1,
                "MovieClipPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Shadow.js": {
            "name": "easeljs/display/Shadow.js",
            "modules": {},
            "classes": {
                "Shadow": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Shape.js": {
            "name": "easeljs/display/Shape.js",
            "modules": {},
            "classes": {
                "Shape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/SpriteSheet.js": {
            "name": "easeljs/display/SpriteSheet.js",
            "modules": {},
            "classes": {
                "SpriteSheet": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Stage.js": {
            "name": "easeljs/display/Stage.js",
            "modules": {},
            "classes": {
                "Stage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Text.js": {
            "name": "easeljs/display/Text.js",
            "modules": {},
            "classes": {
                "Text": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/events/MouseEvent.js": {
            "name": "easeljs/events/MouseEvent.js",
            "modules": {},
            "classes": {
                "MouseEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/filters/BoxBlurFilter.js": {
            "name": "easeljs/filters/BoxBlurFilter.js",
            "modules": {},
            "classes": {
                "BoxBlurFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/filters/ColorFilter.js": {
            "name": "easeljs/filters/ColorFilter.js",
            "modules": {},
            "classes": {
                "ColorFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/filters/ColorMatrix.js": {
            "name": "easeljs/filters/ColorMatrix.js",
            "modules": {},
            "classes": {
                "ColorMatrix": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/filters/ColorMatrixFilter.js": {
            "name": "easeljs/filters/ColorMatrixFilter.js",
            "modules": {},
            "classes": {
                "ColorMatrixFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/filters/Filter.js": {
            "name": "easeljs/filters/Filter.js",
            "modules": {},
            "classes": {
                "Filter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/geom/Matrix2D.js": {
            "name": "easeljs/geom/Matrix2D.js",
            "modules": {},
            "classes": {
                "Matrix2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/geom/Point.js": {
            "name": "easeljs/geom/Point.js",
            "modules": {},
            "classes": {
                "Point": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/geom/Rectangle.js": {
            "name": "easeljs/geom/Rectangle.js",
            "modules": {},
            "classes": {
                "Rectangle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/ui/Touch.js": {
            "name": "easeljs/ui/Touch.js",
            "modules": {},
            "classes": {
                "Touch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/utils/SpriteSheetBuilder.js": {
            "name": "easeljs/utils/SpriteSheetBuilder.js",
            "modules": {},
            "classes": {
                "SpriteSheetBuilder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/utils/SpriteSheetUtils.js": {
            "name": "easeljs/utils/SpriteSheetUtils.js",
            "modules": {},
            "classes": {
                "SpriteSheetUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/utils/Ticker.js": {
            "name": "easeljs/utils/Ticker.js",
            "modules": {},
            "classes": {
                "Ticker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/utils/UID.js": {
            "name": "easeljs/utils/UID.js",
            "modules": {},
            "classes": {
                "UID": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "example.js": {
            "name": "example.js",
            "modules": {},
            "classes": {
                "FBBitmapAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "EaselJS": {
            "name": "EaselJS",
            "submodules": {},
            "classes": {
                "Bitmap": 1,
                "BitmapAnimation": 1,
                "Container": 1,
                "DOMElement": 1,
                "DisplayObject": 1,
                "Command": 1,
                "Graphics": 1,
                "MovieClip": 1,
                "MovieClipPlugin": 1,
                "Shadow": 1,
                "Shape": 1,
                "SpriteSheet": 1,
                "Stage": 1,
                "Text": 1,
                "MouseEvent": 1,
                "BoxBlurFilter": 1,
                "ColorFilter": 1,
                "ColorMatrix": 1,
                "ColorMatrixFilter": 1,
                "Filter": 1,
                "Matrix2D": 1,
                "Point": 1,
                "Rectangle": 1,
                "Touch": 1,
                "SpriteSheetBuilder": 1,
                "SpriteSheetUtils": 1,
                "Ticker": 1,
                "UID": 1,
                "FBBitmapAnimation": 1
            },
            "fors": {
                "Graphics": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "example.js",
            "line": 1,
            "description": "The EaselJS Javascript library provides a retained graphics mode for canvas\nincluding a full, hierarchical display list, a core interaction model, and\nhelper classes to make working with 2D graphics in Canvas much easier."
        }
    },
    "classes": {
        "Bitmap": {
            "name": "Bitmap",
            "shortname": "Bitmap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "file": "easeljs/display/Bitmap.js",
            "line": 31,
            "description": "A Bitmap represents an Image, Canvas, or Video in the display list.",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "imageOrUri",
                    "description": "The source object or URI to an image to display. This can be either an Image, Canvas, or Video object, or a string URI to an image file to load and use. If it is a URI, a new Image object will be constructed and assigned to the .image property.",
                    "type": "Image | HTMLCanvasElement | HTMLVideoElement | String"
                }
            ]
        },
        "BitmapAnimation": {
            "name": "BitmapAnimation",
            "shortname": "BitmapAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 31,
            "description": "Displays frames or sequences of frames (ie. animations) from a sprite sheet image. A sprite sheet is a series of images\n(usually animation frames) combined into a single image. For example, an animation\nconsisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across by 2 high).\nYou can display individual frames, play frames as an animation, and even sequence animations\ntogether. See the SpriteSheet class for more information on setting up frames and animations.",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "spriteSheet",
                    "description": "The SpriteSheet instance to play back. This includes the source image(s), frame\ndimensions, and frame data. See SpriteSheet for more information.",
                    "type": "SpriteSheet"
                }
            ]
        },
        "Container": {
            "name": "Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "file": "easeljs/display/Container.js",
            "line": 31,
            "description": "A Container is a nestable display lists that allows you to work with compound display elements. For\nexample you could group arm, leg, torso and head Bitmaps together into a Person Container, and\ntransform them as a group, while still being able to move the individual parts relative to each\nother. Children of containers have their transform and alpha properties concatenated with their\nparent Container. For example, a Shape with x=100 and alpha=0.5, placed in a Container with\nx=50 and alpha=0.7 will be rendered to the canvas at x=150 and alpha=0.35. Containers have some\noverhead, so you generally shouldn't create a Container to hold a single child.",
            "extends": "DisplayObject",
            "is_constructor": 1
        },
        "DOMElement": {
            "name": "DOMElement",
            "shortname": "DOMElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "file": "easeljs/display/DOMElement.js",
            "line": 33,
            "description": "<b>This class is still experimental, and more advanced use is likely to be buggy. Please report bugs.</b><br/><br/>\nA DOMElement allows you to associate a HTMLElement with the display list. It will be transformed\nwithin the DOM as though it is child of the Container it is added to. However, it is not rendered\nto canvas, and as such will retain whatever z-index it has relative to the canvas (ie. it will be\ndrawn in front of or behind the canvas).<br/><br/>\nThe position of a DOMElement is relative to their parent node in the DOM. It is recommended that\nthe DOM Object be added to a div that also contains the canvas so that they share the same position\non the page.<br/><br/>\nDOMElement is useful for positioning HTML elements over top of canvas content, and for elements\nthat you want to display outside the bounds of the canvas. For example, a tooltip with rich HTML\ncontent.<br/><br/>\nDOMElement instances are not full EaselJS display objects, and do not participate in EaselJS mouse\nevents or support methods like hitTest.",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "htmlElement",
                    "description": "A reference or id for the DOM element to manage.",
                    "type": "HTMLElement"
                }
            ]
        },
        "DisplayObject": {
            "name": "DisplayObject",
            "shortname": "DisplayObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/DisplayObject.js",
            "line": 38,
            "description": "DisplayObject is an abstract class that should not be constructed directly. Instead construct subclasses such as\nSprite, Bitmap, and Shape. DisplayObject is the base class for all display classes in the CanvasDisplay library.\nIt defines the core properties and methods that are shared between all display objects.",
            "is_constructor": 1
        },
        "Command": {
            "name": "Command",
            "shortname": "Command",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Graphics.js",
            "line": 34,
            "description": "Inner class used by the Graphics class. Used to create the instruction lists used in Graphics:",
            "is_constructor": 1
        },
        "Graphics": {
            "name": "Graphics",
            "shortname": "Graphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Graphics.js",
            "line": 52,
            "description": "The Graphics class exposes an easy to use API for generating vector drawing instructions and drawing them to a specified context.\nNote that you can use Graphics without any dependency on the Easel framework by calling draw() directly,\nor it can be used with the Shape object to draw vector graphics within the context of an Easel display list.<br/><br/>\n<pre><code>var g = new Graphics();\n\tg.setStrokeStyle(1);\n\tg.beginStroke(Graphics.getRGB(0,0,0));\n\tg.beginFill(Graphics.getRGB(255,0,0));\n\tg.drawCircle(0,0,3);\n\n\tvar s = new Shape(g);\n\t\ts.x = 100;\n\t\ts.y = 100;\n\n\tstage.addChild(s);\n\tstage.update();</code></pre><br />\nNote that all drawing methods in Graphics return the Graphics instance, so they can be chained together. For example, the following \nline of code would generate the instructions to draw a rectangle with a red stroke and blue fill, then render it to the specified \ncontext2D:<br />\n<pre><code>myGraphics.beginStroke(\"#F00\").beginFill(\"#00F\").drawRect(20, 20, 100, 50).draw(myContext2D);",
            "is_constructor": 1
        },
        "MovieClip": {
            "name": "MovieClip",
            "shortname": "MovieClip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/MovieClip.js",
            "line": 31,
            "description": "The MovieClip class associates a TweenJS Timeline with an EaselJS Container. It allows you to create objects which\nencapsulate timeline animations, state changes, and synched actions. Due to the complexities inherent in correctly\nsetting up a MovieClip, it is largely intended for tool output and is not included in the main EaselJS library.\n<br/><br/>\nCurrently MovieClip only works properly if it is tick based (as opposed to time based) though some concessions have\nbeen made to support time based timelines in the future.",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mode",
                    "description": "Initial value for the mode property. One of MovieClip.INDEPENDENT, MovieClip.SINGLE_FRAME, or MovieClip.SYNCHED.",
                    "type": "String"
                },
                {
                    "name": "startPosition",
                    "description": "Initial value for the startPosition property.",
                    "type": "Number"
                },
                {
                    "name": "loop",
                    "description": "Initial value for the loop property.",
                    "type": "Boolean"
                },
                {
                    "name": "labels",
                    "description": "A hash of labels to pass to the timeline instance associated with this MovieClip.",
                    "type": "Object"
                }
            ]
        },
        "MovieClipPlugin": {
            "name": "MovieClipPlugin",
            "shortname": "MovieClipPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/MovieClip.js",
            "line": 403,
            "description": "This plugin works with TweenJS to prevent the startPosition property from tweening.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "Shadow": {
            "name": "Shadow",
            "shortname": "Shadow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Shadow.js",
            "line": 31,
            "description": "Encapsulates the properties required to define a shadow to apply to a DisplayObject via it's .shadow property.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "color",
                    "description": "The color of the shadow.",
                    "type": "String"
                },
                {
                    "name": "offsetX",
                    "description": "The x offset of the shadow.",
                    "type": "Number"
                },
                {
                    "name": "offsetY",
                    "description": "The y offset of the shadow.",
                    "type": "Number"
                },
                {
                    "name": "blur",
                    "description": "The size of the blurring effect.",
                    "type": "Number"
                }
            ]
        },
        "Shape": {
            "name": "Shape",
            "shortname": "Shape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Shape.js",
            "line": 31,
            "description": "A Shape allows you to display vector art in the display list. It composites a Graphics instance which exposes all of the vector\ndrawing methods. The Graphics instance can be shared between multiple Shape instances to display the same vector graphics with different\npositions or transforms. If the vector art will not change between draws, you may want to use the cache() method to reduce the rendering cost.",
            "extends": "DisplayObject",
            "params": [
                {
                    "name": "graphics",
                    "description": "Optional. The graphics instance to display. If null, a new Graphics instance will be created.",
                    "type": "Graphics"
                }
            ]
        },
        "SpriteSheet": {
            "name": "SpriteSheet",
            "shortname": "SpriteSheet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/SpriteSheet.js",
            "line": 30,
            "description": "Encapsulates the properties and methods associated with a sprite sheet. A sprite sheet is a series of images (usually animation frames) combined\ninto a larger image (or images). For example, an animation consisting of 8 100x100 images could be combined into a 400x200\nsprite sheet (4 frames across by 2 high).<br/><br/>\nThe data passed to the SpriteSheet constructor defines three critical pieces of information:<OL>\n   <LI> The image or images to use.</LI>\n   <LI> The positions of individual image frames. This data can be represented in one of two ways:\n   As a regular grid of sequential, equal-sized frames, or as individually defined, variable sized frames arranged in an irregular (non-sequential) fashion.</LI>\n   <LI> Likewise, animations can be represented in two ways: As a series of sequential frames, defined by a start and end frame [0,3], or as a list of frames [0,1,2,3].\n</OL>\nThe easiest way to understand the data format is to see an example:\n<pre><code>data = {\n&nbsp;\n// DEFINING IMAGES:\n&#9;// list of images or image URIs to use. SpriteSheet can handle preloading.\n&#9;// the order dictates their index value for frame definition.\n&#9;images: [image1, \"path/to/image2.png\"],\n&nbsp;\n// DEFINING FRAMES:\n&nbsp;\n&#9;// the simple way to define frames, only requires frame size because frames are consecutive:\n&#9;// define frame width/height, and optionally the frame count and registration point x/y.\n&#9;// if count is omitted, it will be calculated automatically based on image dimensions.\n&#9;frames: {width:64, height:64, count:20, regX: 32, regY:64},\n&nbsp;\n&#9;// OR, the complex way that defines individual rects for frames.\n&#9;// The 5th value is the image index per the list defined in \"images\" (defaults to 0).\n&#9;frames: [\n&#9;\t// x, y, width, height, imageIndex, regX, regY\n&#9;\t[0,0,64,64,0,32,64],\n&#9;\t[64,0,96,64,0]\n&#9;],\n&nbsp;\n// DEFINING ANIMATIONS:\n&nbsp;\n&#9;// simple animation definitions. Define a consecutive range of frames.\n&#9;// also optionally define a \"next\" animation name for sequencing.\n&#9;// setting next to false makes it pause when it reaches the end.\n&#9;animations: {\n&#9;\t// start, end, next, frequency\n&#9;\trun: [0,8],\n&#9;\tjump: [9,12,\"run\",2],\n&#9;\tstand: [13]\n&#9;}\n&nbsp;\n&#9;// the complex approach which specifies every frame in the animation by index.\n&#9;animations: {\n&#9;\trun: {\n&#9;\t\tframes: [1,2,3,3,2,1]\n&#9;\t},\n&#9;\tjump: {\n&#9;\t\tframes: [1,4,5,6,1],\n&#9;\t\tnext: \"run\",\n&#9;\t\tfrequency: 2\n&#9;\t},\n&#9;\tstand: { frames: [7] }\n&#9;}\n&nbsp;\n&#9;// the above two approaches can be combined, you can also use a single frame definition:\n&#9;animations: {\n&#9;\trun: [0,8,true,2],\n&#9;\tjump: {\n&#9;\t\tframes: [8,9,10,9,8],\n&#9;\t\tnext: \"run\",\n&#9;\t\tfrequency: 2\n&#9;\t},\n&#9;\tstand:7\n&#9;}\n}</code></pre>\n&nbsp;\nFor example, to define a simple sprite sheet, with a single image \"sprites.jpg\" arranged in a regular 50x50 grid\nwith two animations, \"run\" looping from frame 0-4 inclusive, and \"jump\" playing from frame 5-8 and sequencing back to run:\n<pre><code>data = {\n&#9;images: [\"sprites.jpg\"],\n&#9;frames: {width:50, height:50},\n&#9;animations: {run:[0,4], jump:[5,8,\"run\"]}\n}</code></pre>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ]
        },
        "Stage": {
            "name": "Stage",
            "shortname": "Stage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Stage.js",
            "line": 31,
            "description": "A stage is the root level Container for a display list. Each time its tick method is called, it will render its display\nlist to its target canvas.",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas the stage will render to.",
                    "type": "HTMLCanvasElement"
                }
            ]
        },
        "Text": {
            "name": "Text",
            "shortname": "Text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Text.js",
            "line": 31,
            "description": "Allows you to display one or more lines of dynamic text (not user editable) in the display list.\nLine wrapping support (using the lineWidth is very basic, wrapping on spaces and tabs only. Note\nthat as an alternative to Text, you can position HTML text above or below the canvas relative to \nitems in the display list using the localToGlobal() method.",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "Optional. The text to display.",
                    "type": "String"
                },
                {
                    "name": "font",
                    "description": "Optional. The font style to use. Any valid value for the CSS font attribute is \nacceptable (ex. \"36px bold Arial\").",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "Optional. The color to draw the text in. Any valid value for the CSS color attribute\nis acceptable (ex. \"#F00\").",
                    "type": "String"
                }
            ]
        },
        "MouseEvent": {
            "name": "MouseEvent",
            "shortname": "MouseEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/events/MouseEvent.js",
            "line": 31,
            "description": "This is passed as the parameter to onPress, onMouseMove, onMouseUp, onMouseDown, and onClick handlers on\nDisplayObject instances.\nBy default, mouse events are disabled for performance reasons. In order to enabled them for a specified stage\nset mouseEventsEnabled to true on your stage instance.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "stageX",
                    "description": "The mouseX position relative to the stage.",
                    "type": "Number"
                },
                {
                    "name": "stageY",
                    "description": "The mouseY position relative to the stage.",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "The display object this event relates to.",
                    "type": "DisplayObject"
                },
                {
                    "name": "nativeEvent",
                    "description": "The native DOM event related to this mouse event.",
                    "type": "MouseEvent"
                }
            ]
        },
        "BoxBlurFilter": {
            "name": "BoxBlurFilter",
            "shortname": "BoxBlurFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/filters/BoxBlurFilter.js",
            "line": 31,
            "description": "BoxBlurFilter applies a box blur to DisplayObjects",
            "uses": [
                "Filter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "blurX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "blurY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "quality",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "ColorFilter": {
            "name": "ColorFilter",
            "shortname": "ColorFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/filters/ColorFilter.js",
            "line": 31,
            "description": "Applies color transforms.",
            "is_constructor": 1,
            "uses": [
                "Filter"
            ],
            "params": [
                {
                    "name": "redMultiplier",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "greenMultiplier",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "blueMultiplier",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "alphaMultiplier",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "redOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "greenOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "blueOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "alphaOffset",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "ColorMatrix": {
            "name": "ColorMatrix",
            "shortname": "ColorMatrix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 31,
            "description": "Provides helper functions for assembling a matrix for use with the ColorMatrixFilter.\nCan be used directly as the matrix for a ColorMatrixFilter. Most methods return the instance\nto facilitate chained calls. Ex. myColorMatrix.adjustHue(20).adjustBrightness(50);",
            "is_constructor": 1,
            "uses": [
                "Array"
            ],
            "params": [
                {
                    "name": "brightness",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "contrast",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "hue",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "ColorMatrixFilter": {
            "name": "ColorMatrixFilter",
            "shortname": "ColorMatrixFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/filters/ColorMatrixFilter.js",
            "line": 31,
            "description": "Applies color transforms.",
            "is_constructor": 1,
            "uses": [
                "Filter"
            ],
            "params": [
                {
                    "name": "blurX",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Filter": {
            "name": "Filter",
            "shortname": "Filter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "BoxBlurFilter",
                "ColorFilter",
                "ColorMatrixFilter"
            ],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/filters/Filter.js",
            "line": 31,
            "description": "Base class that all filters should inherit from.",
            "is_constructor": 1
        },
        "Matrix2D": {
            "name": "Matrix2D",
            "shortname": "Matrix2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/geom/Matrix2D.js",
            "line": 31,
            "description": "Represents an affine transformation matrix, and provides tools for constructing and concatenating matrixes.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "a",
                    "description": "Specifies the a property for the new matrix.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Specifies the b property for the new matrix.",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "Specifies the c property for the new matrix.",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "Specifies the d property for the new matrix.",
                    "type": "Number"
                },
                {
                    "name": "tx",
                    "description": "Specifies the tx property for the new matrix.",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "Specifies the ty property for the new matrix.",
                    "type": "Number"
                }
            ]
        },
        "Point": {
            "name": "Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/geom/Point.js",
            "line": 31,
            "description": "Represents a point on a 2 dimensional x / y coordinate system.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X position. Default is 0.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position. Default is 0.",
                    "type": "Number"
                }
            ]
        },
        "Rectangle": {
            "name": "Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/geom/Rectangle.js",
            "line": 31,
            "description": "Represents a rectangle as defined by the points (x, y) and (x+width, y+height).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X position. Default is 0.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position. Default is 0.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Width. Default is 0.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height. Default is 0.",
                    "type": "Number"
                }
            ]
        },
        "Touch": {
            "name": "Touch",
            "shortname": "Touch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/ui/Touch.js",
            "line": 32,
            "description": "Global utility for working with touch enabled devices in EaselJS.",
            "static": 1
        },
        "SpriteSheetBuilder": {
            "name": "SpriteSheetBuilder",
            "shortname": "SpriteSheetBuilder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 31,
            "description": "The SpriteSheetBuilder allows you to generate sprite sheets at run time from any display object. This can allow\nyou to maintain your assets as vector graphics (for low file size), and render them at run time as sprite sheets\nfor better performance.\n<br/><br/>\nSprite sheets can be built either synchronously, or asynchronously, so that large sprite sheets can be generated\nwithout locking the UI.\n<br/><br/>\nNote that the \"images\" used in the generated sprite sheet are actually canvas elements, and that they will be sized\nto the nearest power of 2 up to the value of maxWidth or maxHeight.",
            "is_constructor": 1
        },
        "SpriteSheetUtils": {
            "name": "SpriteSheetUtils",
            "shortname": "SpriteSheetUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/utils/SpriteSheetUtils.js",
            "line": 31,
            "description": "The SpriteSheetUtils class is a collection of static methods for working\nwith sprite sheets.  A sprite sheet is a series of images (usually animation frames)\ncombined into a single image on a regular grid. For example, an animation consisting\nof 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across by 2 high).\nThe SpriteSheetUtils class uses a static interface and should not be instantiated.",
            "static": 1
        },
        "Ticker": {
            "name": "Ticker",
            "shortname": "Ticker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/utils/Ticker.js",
            "line": 32,
            "description": "The Ticker class uses a static interface (ex. Ticker.getPaused()) and should not be instantiated.\nProvides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe\nto the tick event to be notified when a set time interval has elapsed.\nNote that the interval that the tick event is called is a target interval, and may be broadcast\nat a slower interval during times of high CPU load.",
            "static": 1
        },
        "UID": {
            "name": "UID",
            "shortname": "UID",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/utils/UID.js",
            "line": 31,
            "description": "Global utility for generating sequential unique ID numbers.\nThe UID class uses a static interface (ex. UID.get()) and should not be instantiated.",
            "static": 1
        },
        "FBBitmapAnimation": {
            "name": "FBBitmapAnimation",
            "shortname": "FBBitmapAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "example.js",
            "line": 1,
            "description": "Displays frames or sequences of frames (ie. animations) from a sprite sheet image. A sprite sheet is a series of images\n(usually animation frames) combined into a single image. For example, an animation\nconsisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across by 2 high).\nYou can display individual frames, play frames as an animation, and even sequence animations\ntogether. See the SpriteSheet class for more information on setting up frames and animations.",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "spriteSheet",
                    "description": "The SpriteSheet instance to play back. This includes the source image(s), frame\ndimensions, and frame data. See SpriteSheet for more information.",
                    "type": "SpriteSheet"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 44,
            "description": "The image to render. This can be an Image, a Canvas, or a Video.",
            "itemtype": "property",
            "name": "image",
            "type": "Image | HTMLCanvasElement | HTMLVideoElement",
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 51,
            "description": "Whether or not the Bitmap should be draw to the canvas at whole pixel coordinates.",
            "itemtype": "property",
            "name": "snapToPixel",
            "type": "Boolean",
            "default": "true",
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 59,
            "description": "Specifies an area of the source image to draw. If omitted, the whole image will be drawn.",
            "itemtype": "property",
            "name": "sourceRect",
            "type": "Rectangle",
            "default": "null",
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 69,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 76,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 93,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 104,
            "itemtype": "property",
            "name": "DisplayObject_draw",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 111,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache. \nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 135,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance.",
            "itemtype": "method",
            "name": "cache",
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 141,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance.",
            "itemtype": "method",
            "name": "updateCache",
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 147,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance.",
            "itemtype": "method",
            "name": "uncache",
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 153,
            "description": "Returns a clone of the Bitmap instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Bitmap instance.",
                "type": "Bitmap"
            },
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 164,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Bitmap"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 50,
            "description": "Specifies a function to call whenever any animation reaches its end. It will be called with two\nparams: the first will be a reference to this instance, the second will be the name of the animation\nthat just ended.",
            "itemtype": "property",
            "name": "onAnimationEnd",
            "type": "Function",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 59,
            "description": "The frame that will be drawn when draw is called. Note that with some SpriteSheet data, this\nwill advance non-sequentially. READ-ONLY.",
            "itemtype": "property",
            "name": "currentFrame",
            "type": "Number",
            "default": "-1",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 68,
            "description": "Returns the currently playing animation. READ-ONLY.",
            "itemtype": "property",
            "name": "currentAnimation",
            "type": "String",
            "final": 1,
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 76,
            "description": "Prevents the animation from advancing each tick automatically. For example, you could create a sprite\nsheet of icons, set paused to true, and display the appropriate icon by setting currentFrame.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "default": "false",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 85,
            "description": "The SpriteSheet instance to play back. This includes the source image, frame dimensions, and frame\ndata. See SpriteSheet for more information.",
            "itemtype": "property",
            "name": "spriteSheet",
            "type": "SpriteSheet",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 93,
            "description": "Whether or not the Bitmap should be draw to the canvas at whole pixel coordinates.",
            "itemtype": "property",
            "name": "snapToPixel",
            "type": "Boolean",
            "default": "true",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 101,
            "description": "When used in conjunction with animations having an frequency greater than 1, this lets you offset which tick the playhead will\nadvance on. For example, you could create two BitmapAnimations, both playing an animation with a frequency of 2, but one\nhaving offset set to 1. Both instances would advance every second tick, but they would advance on alternating\nticks (effectively, one instance would advance on odd ticks, the other on even ticks).",
            "itemtype": "property",
            "name": "offset",
            "type": "Number",
            "default": "0",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 113,
            "description": "Specifies the current frame index within the current playing animation. When playing normally, this will\nincrease successively from 0 to n-1, where n is the number of frames in the current animation.",
            "itemtype": "property",
            "name": "currentAnimationFrame",
            "type": "Number",
            "default": "0",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 123,
            "itemtype": "property",
            "name": "_advanceCount",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "default": "0",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 131,
            "itemtype": "property",
            "name": "_animation",
            "access": "protected",
            "tagname": "",
            "type": "Object",
            "default": "null",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 140,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 147,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 157,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 168,
            "itemtype": "property",
            "name": "DisplayObject_draw",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 175,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 199,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance.",
            "itemtype": "method",
            "name": "cache",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 205,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance.",
            "itemtype": "method",
            "name": "updateCache",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 211,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance.",
            "itemtype": "method",
            "name": "uncache",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 217,
            "description": "TODO: Doc.",
            "itemtype": "method",
            "name": "play",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 225,
            "description": "TODO: Doc.",
            "itemtype": "method",
            "name": "stop",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 233,
            "description": "Sets paused to false and plays the specified animation name, named frame, or frame number.",
            "itemtype": "method",
            "name": "gotoAndPlay",
            "params": [
                {
                    "name": "frameOrAnimation",
                    "description": "The frame number or animation name that the playhead should move to\nand begin playing.",
                    "type": "String|Number"
                }
            ],
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 244,
            "description": "Sets paused to true and seeks to the specified animation name, named frame, or frame number.",
            "itemtype": "method",
            "name": "gotoAndStop",
            "params": [
                {
                    "name": "frameOrAnimation",
                    "description": "The frame number or animation name that the playhead should move to\nand stop.",
                    "type": "String|Number"
                }
            ],
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 255,
            "description": "Advances the playhead. This occurs automatically each tick by default.",
            "itemtype": "method",
            "name": "advance",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 265,
            "description": "Returns a clone of the Point instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Point instance.",
                "type": "Point"
            },
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 276,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 286,
            "description": "Advances the currentFrame if paused is not true. This is called automatically when the Stage ticks.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_tick",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 300,
            "description": "Normalizes the current frame, advancing animations and dispatching callbacks as appropriate.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_normalizeCurrentFrame",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 328,
            "itemtype": "property",
            "name": "DisplayObject_cloneProps",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 335,
            "itemtype": "method",
            "name": "cloneProps",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "Text"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/BitmapAnimation.js",
            "line": 351,
            "description": "Moves the playhead to the specified frame number or animation.",
            "itemtype": "method",
            "name": "_goto",
            "params": [
                {
                    "name": "frameOrAnimation",
                    "description": "The frame number or animation that the playhead should move to.",
                    "type": "String|Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BitmapAnimation"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 49,
            "description": "The array of children in the display list. You should usually use the child management methods,\nrather than accessing this directly, but it is included for advanced users.",
            "itemtype": "property",
            "name": "children",
            "type": "Array[DisplayObject]",
            "default": "null",
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 60,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 67,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 79,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 90,
            "itemtype": "property",
            "name": "DisplayObject_draw",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 97,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 125,
            "description": "Adds a child to the top of the display list. You can also add multiple children, such as \"addChild(child1, child2, ...);\".\nReturns the child that was added, or the last child if multiple children were added.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "The display object to add.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "The child that was added, or the last child if multiple children were added.",
                "type": "DisplayObject"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 145,
            "description": "Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and setting\nits parent to this Container. You can also add multiple children, such as \"addChildAt(child1, child2, ..., index);\". The\nindex must be between 0 and numChildren. For example, to add myShape under otherShape in the display list, you could use:\ncontainer.addChildAt(myShape, container.getChildIndex(otherShape)). This would also bump otherShape's index up by one.\nReturns the last child that was added, or the last child if multiple children were added. Fails silently if the index \nis out of range.",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "The display object to add.",
                    "type": "DisplayObject"
                },
                {
                    "name": "index",
                    "description": "The index to add the child at.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The child that was added, or the last child if multiple children were added.",
                "type": "DisplayObject"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 171,
            "description": "Removes the specified child from the display list. Note that it is faster to use removeChildAt() if the index is already\nknown. You can also remove multiple children, such as \"removeChild(child1, child2, ...);\". Returns true if the child\n(or children) was removed, or false if it was not in the display list.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "The child to remove.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "true if the child (or children) was removed, or false if it was not in the display list.",
                "type": "Boolean"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 189,
            "description": "Removes the child at the specified index from the display list, and sets its parent to null. You can also remove multiple\nchildren, such as \"removeChildAt(2, 7, ...);\". Returns true if the child (or children) was removed, or false if any index\nwas out of range.",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the child to remove.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the child (or children) was removed, or false if any index was out of range."
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 213,
            "description": "Removes all children from the display list.",
            "itemtype": "method",
            "name": "removeAllChildren",
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 222,
            "description": "Returns the child at the specified index.",
            "itemtype": "method",
            "name": "getChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the child to return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The child at the specified index.",
                "type": "DisplayObject"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 232,
            "description": "Performs an array sort operation on the child list.",
            "itemtype": "method",
            "name": "sortChildren",
            "params": [
                {
                    "name": "sortFunction",
                    "description": "the function to use to sort the child list. See javascript's Array.sort documentation\nfor details.",
                    "type": "Function"
                }
            ],
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 242,
            "description": "Returns the index of the specified child in the display list, or -1 if it is not in the display list.",
            "itemtype": "method",
            "name": "getChildIndex",
            "params": [
                {
                    "name": "child",
                    "description": "The child to return the index of.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "The index of the specified child. -1 if the child is not found.",
                "type": "Number"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 252,
            "description": "Returns the number of children in the display list.",
            "itemtype": "method",
            "name": "getNumChildren",
            "return": {
                "description": "The number of children in the display list.",
                "type": "Number"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 261,
            "description": "Swaps the children at the specified indexes. Fails silently if either index is out of range.",
            "params": [
                {
                    "name": "index1",
                    "description": ""
                },
                {
                    "name": "index2",
                    "description": ""
                }
            ],
            "itemtype": "method",
            "name": "swapChildrenAt",
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 276,
            "description": "Swaps the specified children's depth in the display list. Fails silently if either child is not a child of this Container.",
            "params": [
                {
                    "name": "child1",
                    "description": ""
                },
                {
                    "name": "child2",
                    "description": ""
                }
            ],
            "itemtype": "method",
            "name": "swapChildren",
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 295,
            "description": "Changes the depth of the specified child. Fails silently if the child is not a child of this container, or the index is out of range.",
            "params": [
                {
                    "name": "child",
                    "description": ""
                },
                {
                    "name": "index",
                    "description": ""
                }
            ],
            "itemtype": "method",
            "name": "setChildIndex",
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 313,
            "description": "Returns true if the specified display object either is this container or is a descendent.\n(child, grandchild, etc) of this container.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObject to be checked.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "true if the specified display object either is this container or is a descendent.",
                "type": "Boolean"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 328,
            "description": "Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at the specified\nposition). This ignores the alpha, shadow and compositeOperation of the display object, and all transform properties\nincluding regX/Y.",
            "itemtype": "method",
            "name": "hitTest",
            "params": [
                {
                    "name": "x",
                    "description": "The x position to check in the display object's local coordinates."
                },
                {
                    "name": "y",
                    "description": "The y position to check in the display object's local coordinates."
                }
            ],
            "return": {
                "description": "A Boolean indicating whether there is a visible section of a DisplayObject that overlaps the specified\ncoordinates.",
                "type": "Boolean"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 343,
            "description": "Returns an array of all display objects under the specified coordinates that are in this container's display list.\nThis routine ignores any display objects with mouseEnabled set to false. The array will be sorted in order of visual\ndepth, with the top-most display object at index 0. This uses shape based hit detection, and can be an expensive operation\nto run, so it is best to use it carefully. For example, if testing for objects under the mouse, test on tick (instead of on\nmousemove), and only if the mouse's position has changed.",
            "itemtype": "method",
            "name": "getObjectsUnderPoint",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the container to test.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position in the container to test.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An Array of DisplayObjects under the specified coordinates.",
                "type": "Array[DisplayObject]"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 361,
            "description": "Similar to getObjectsUnderPoint(), but returns only the top-most display object. This runs significantly faster than\ngetObjectsUnderPoint(), but is still an expensive operation. See getObjectsUnderPoint() for more information.",
            "itemtype": "method",
            "name": "getObjectUnderPoint",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the container to test.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position in the container to test.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The top-most display object under the specified coordinates.",
                "type": "DisplayObject"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 374,
            "description": "Returns a clone of this Container. Some properties that are specific to this instance's current context are reverted to\ntheir defaults (for example .parent).",
            "params": [
                {
                    "name": "recursive",
                    "description": "If true, all of the descendants of this container will be cloned recursively. If false, the\nproperties of the container will be cloned, but the new instance will not have any children.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "A clone of the current Container instance.",
                "type": "Container"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 395,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 405,
            "itemtype": "method",
            "name": "_tick",
            "access": "protected",
            "tagname": "",
            "class": "Container"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 417,
            "itemtype": "method",
            "name": "_getObjectsUnderPoint",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "mouseEvents",
                    "description": "A bitmask indicating which mouseEvent types to look for. Bit 1 specifies onPress &\nonClick & onDoubleClick, bit 2 specifies it should look for onMouseOver and onMouseOut. This implementation may change.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array[DisplayObject]"
            },
            "access": "protected",
            "tagname": "",
            "class": "Container"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 58,
            "description": "The DOM object to manage.",
            "itemtype": "property",
            "name": "htmlElement",
            "type": "HTMLElement",
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 66,
            "itemtype": "property",
            "name": "_style",
            "access": "protected",
            "tagname": "",
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 73,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 80,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 99,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 110,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 134,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "cache",
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 140,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "uncache",
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 146,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "updateCache",
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 152,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "updateCache",
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 158,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "localToGlobal",
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 164,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "globalToLocal",
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 170,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "localToLocal",
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 176,
            "description": "This presently clones the DOMElement instance, but not the associated HTMLElement.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the DOMElement instance.",
                "type": "DOMElement"
            },
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 187,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "DOMElement"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 50,
            "description": "Suppresses errors generated when using features like hitTest, onPress/onClick, and getObjectsUnderPoint with cross\ndomain content",
            "itemtype": "property",
            "name": "suppressCrossDomainErrors",
            "static": 1,
            "type": "Boolean",
            "default": "false",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 60,
            "itemtype": "property",
            "name": "_hitTestCanvas",
            "type": "HTMLCanvasElement",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 69,
            "itemtype": "property",
            "name": "_hitTestContext",
            "type": "CanvasRenderingContext2D",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 77,
            "itemtype": "property",
            "name": "_nextCacheID",
            "type": "Number",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 85,
            "description": "The alpha (transparency) for this display object. 0 is fully transparent, 1 is fully opaque.",
            "itemtype": "property",
            "name": "alpha",
            "type": "Number",
            "default": "1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 93,
            "description": "If a cache is active, this returns the canvas that holds the cached version of this display object. See cache()\nfor more information. READ-ONLY.",
            "itemtype": "property",
            "name": "cacheCanvas",
            "type": "HTMLCanvasElement",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 102,
            "description": "Unique ID for this display object. Makes display objects easier for some uses.",
            "itemtype": "property",
            "name": "id",
            "type": "Number",
            "default": "-1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 110,
            "description": "Indicates whether to include this object when running Stage.getObjectsUnderPoint(). Setting this to true for\nSprites will cause the Sprite to be returned (not its children) regardless of whether it's mouseChildren property\nis true.",
            "itemtype": "property",
            "name": "mouseEnabled",
            "type": "Boolean",
            "default": "true",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 120,
            "description": "An optional name for this display object. Included in toString(). Useful for debugging.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 128,
            "description": "A reference to the Sprite or Stage object that contains this display object, or null if it has not been added to\none. READ-ONLY.",
            "itemtype": "property",
            "name": "parent",
            "final": 1,
            "type": "DisplayObject",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 138,
            "description": "The x offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around\nit's center, you would set regX and regY to 50.",
            "itemtype": "property",
            "name": "regX",
            "type": "Number",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 147,
            "description": "The y offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around\nit's center, you would set regX and regY to 50.",
            "itemtype": "property",
            "name": "regY",
            "type": "Number",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 156,
            "description": "The rotation in degrees for this display object.",
            "itemtype": "property",
            "name": "rotation",
            "type": "Number",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 164,
            "description": "The factor to stretch this display object horizontally. For example, setting scaleX to 2 will stretch the display\nobject to twice it's nominal width.",
            "itemtype": "property",
            "name": "scaleX",
            "type": "Number",
            "default": "1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 173,
            "description": "The factor to stretch this display object vertically. For example, setting scaleY to 0.5 will stretch the display\nobject to half it's nominal height.",
            "itemtype": "property",
            "name": "scaleY",
            "type": "Number",
            "default": "1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 182,
            "description": "The factor to skew this display object horizontally.",
            "itemtype": "property",
            "name": "skewX",
            "type": "Number",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 190,
            "description": "The factor to skew this display object vertically.",
            "itemtype": "property",
            "name": "skewY",
            "type": "Number",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 198,
            "description": "A shadow object that defines the shadow to render on this display object. Set to null to remove a shadow. If\nnull, this property is inherited from the parent container.",
            "itemtype": "property",
            "name": "shadow",
            "type": "Shadow",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 207,
            "description": "Indicates whether this display object should be rendered to the canvas and included when running\nStage.getObjectsUnderPoint().",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "default": "true",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 216,
            "description": "The x (horizontal) position of the display object, relative to its parent.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 224,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 231,
            "description": "The composite operation indicates how the pixels of this display object will be composited with the elements\nbehind it. If null, this property is inherited from the parent container. For more information, read the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\nwhatwg spec on compositing</a>.",
            "itemtype": "property",
            "name": "compositeOperation",
            "type": "String",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 242,
            "description": "Indicates whether the display object should have it's x & y position rounded prior to drawing it to stage.\nSnapping to whole pixels can result in a sharper and faster draw for images (ex. Bitmap & cached objects).\nThis only applies if the enclosing stage has snapPixelsEnabled set to true. The snapToPixel property is true\nby default for Bitmap and BitmapAnimation instances, and false for all other display objects.\n<br/><br/>\nNote that this applies only rounds the display object's local position. You should\nensure that all of the display object's ancestors (parent containers) are also on a whole pixel. You can do this\nby setting the ancestors' snapToPixel property to true.",
            "itemtype": "property",
            "name": "snapToPixel",
            "type": "Boolean",
            "default": "false",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 257,
            "description": "The onPress callback is called when the user presses down on their mouse over this display object. The handler\nis passed a single param containing the corresponding MouseEvent instance. You can subscribe to the onMouseMove\nand onMouseUp callbacks of the event object to receive these events until the user releases the mouse button.\nIf an onPress handler is set on a container, it will receive the event if any of its children are clicked.",
            "itemtype": "event",
            "name": "onPress",
            "params": [
                {
                    "name": "event",
                    "description": "MouseEvent with information about the event.",
                    "type": "MouseEvent"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 267,
            "description": "The onClick callback is called when the user presses down on and then releases the mouse button over this\ndisplay object. The handler is passed a single param containing the corresponding MouseEvent instance. If an\nonClick handler is set on a container, it will receive the event if any of its children are clicked.",
            "itemtype": "event",
            "name": "onClick",
            "params": [
                {
                    "name": "event",
                    "description": "MouseEvent with information about the event.",
                    "type": "MouseEvent"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 276,
            "description": "The onDoubleClick callback is called when the user double clicks over this display object. The handler is\npassed a single param containing the corresponding MouseEvent instance. If an onDoubleClick handler is set\non a container, it will receive the event if any of its children are clicked.",
            "itemtype": "event",
            "name": "onDoubleClick",
            "params": [
                {
                    "name": "event",
                    "description": "MouseEvent with information about the event.",
                    "type": "MouseEvent"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 285,
            "description": "The onMouseOver callback is called when the user rolls over the display object. You must enable this event using\nstage.enableMouseOver(). The handler is passed a single param containing the corresponding MouseEvent instance.",
            "itemtype": "event",
            "name": "onMouseOver",
            "params": [
                {
                    "name": "event",
                    "description": "MouseEvent with information about the event.",
                    "type": "MouseEvent"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 293,
            "description": "The onMouseOut callback is called when the user rolls off of the display object. You must enable this event using\nstage.enableMouseOver(). The handler is passed a single param containing the corresponding MouseEvent instance.",
            "itemtype": "event",
            "name": "onMouseOut",
            "params": [
                {
                    "name": "event",
                    "description": "MouseEvent with information about the event.",
                    "type": "MouseEvent"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 301,
            "description": "The onTick callback is called on each display object on a stage whenever the stage updates.\nThis occurs immediately before the rendering (draw) pass.",
            "itemtype": "event",
            "name": "onTick",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 308,
            "description": "An array of Filter objects to apply to this display object. Filters are only applied / updated when cache() or\nupdateCache() is called on the display object, and only apply to the area that is cached.",
            "itemtype": "property",
            "name": "filters",
            "type": "Array[Filter]",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 317,
            "description": "Returns an ID number that uniquely identifies the current cache for this display object.\nThis can be used to determine if the cache has changed since a previous check.",
            "itemtype": "property",
            "name": "cacheID",
            "type": "Number",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 326,
            "description": "A Shape instance that defines a vector mask (clipping path) for this display object.  The shape's transformation\nwill be applied relative to the display object's parent coordinates (as if it were a child of the parent).",
            "itemtype": "property",
            "name": "mask",
            "type": "Shape",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 335,
            "description": "A display object that will be tested when checking mouse interactions or testing getObjectsUnderPoint. The hit area\nwill have its transformation applied relative to this display object's coordinate space (as though the hit test object were a child of this\ndisplay object and relative to its regX/Y). It is NOT used for hitTest().",
            "itemtype": "property",
            "name": "hitArea",
            "type": "DisplayObject",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 348,
            "itemtype": "property",
            "name": "_cacheOffsetX",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 356,
            "itemtype": "property",
            "name": "_cacheOffsetY",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 364,
            "itemtype": "property",
            "name": "_cacheDataURLID",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 372,
            "itemtype": "property",
            "name": "_cacheDataURL",
            "access": "protected",
            "tagname": "",
            "type": "String",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 380,
            "itemtype": "property",
            "name": "_matrix",
            "access": "protected",
            "tagname": "",
            "type": "Matrix2D",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 392,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 403,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 414,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 430,
            "description": "Applies this display object's transformation, alpha, globalCompositeOperation, clipping path (mask), and shadow to the specified\ncontext. This is typically called prior to draw.",
            "itemtype": "method",
            "name": "setupContext",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D to update.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 458,
            "description": "Draws the display object into a new canvas, which is then used for subsequent draws. For complex content\nthat does not change frequently (ex. a Sprite with many children that do not move, or a complex vector Shape),\nthis can provide for much faster rendering because the content does not need to be re-rendered each tick. The\ncached display object can be moved, rotated, faded, etc freely, however if it's content changes, you must manually\nupdate the cache by calling updateCache() or cache() again. You must specify the cache area via the x, y, w,\nand h parameters. This defines the rectangle that will be rendered and cached using this display object's\ncoordinates. For example if you defined a Shape that drew a circle at 0, 0 with a radius of 25, you could call\nmyShape.cache(-25, -25, 50, 50) to cache the full shape.",
            "itemtype": "method",
            "name": "cache",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate origin for the cache region.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate origin for the cache region.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the cache region.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the cache region.",
                    "type": "Number"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 489,
            "description": "Redraws the display object to its cache. Calling updateCache without an active cache will throw an error.\nIf compositeOperation is null the current cache will be cleared prior to drawing. Otherwise the display object\nwill be drawn over the existing cache using the specified compositeOperation.",
            "itemtype": "method",
            "name": "updateCache",
            "params": [
                {
                    "name": "compositeOperation",
                    "description": "The compositeOperation to use, or null to clear the cache and redraw it.\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\nwhatwg spec on compositing</a>.",
                    "type": "String"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 512,
            "description": "Clears the current cache. See cache() for more information.",
            "itemtype": "method",
            "name": "uncache",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 521,
            "description": "Returns a data URL for the cache, or null if this display object is not cached.\nUses cacheID to ensure a new data URL is not generated if the cache has not changed.",
            "itemtype": "method",
            "name": "getCacheDataURL.",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 532,
            "description": "Returns the stage that this display object will be rendered on, or null if it has not been added to one.",
            "itemtype": "method",
            "name": "getStage",
            "return": {
                "description": "The Stage instance that the display object is a descendent of. null if the DisplayObject has not\nbeen added to a Stage.",
                "type": "Stage"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 547,
            "description": "Transforms the specified x and y position from the coordinate space of the display object\nto the global (stage) coordinate space. For example, this could be used to position an HTML label\nover a specific point on a nested display object. Returns a Point instance with x and y properties\ncorrelating to the transformed coordinates on the stage.",
            "itemtype": "method",
            "name": "localToGlobal",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the source display object to transform.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position in the source display object to transform.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Point instance with x and y properties correlating to the transformed coordinates\non the stage.",
                "type": "Point"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 565,
            "description": "Transforms the specified x and y position from the global (stage) coordinate space to the\ncoordinate space of the display object. For example, this could be used to determine\nthe current mouse position within the display object. Returns a Point instance with x and y properties\ncorrelating to the transformed position in the display object's coordinate space.",
            "itemtype": "method",
            "name": "globalToLocal",
            "params": [
                {
                    "name": "x",
                    "description": "The x position on the stage to transform.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position on the stage to transform.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Point instance with x and y properties correlating to the transformed position in the\ndisplay object's coordinate space.",
                "type": "Point"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 584,
            "description": "Transforms the specified x and y position from the coordinate space of this display object to the\ncoordinate space of the target display object. Returns a Point instance with x and y properties\ncorrelating to the transformed position in the target's coordinate space. Effectively the same as calling\nvar pt = this.localToGlobal(x, y); pt = target.globalToLocal(pt.x, pt.y);",
            "itemtype": "method",
            "name": "localToLocal",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the source display object to transform.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position on the stage to transform.",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "The target display object to which the coordinates will be transformed.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "Returns a Point instance with x and y properties correlating to the transformed position\nin the target's coordinate space.",
                "type": "Point"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 601,
            "description": "Shortcut method to quickly set the transform properties on the display object. All parameters are optional.\nOmitted parameters will have the default value set (ex. 0 for x/y, 1 for scaleX/Y).",
            "itemtype": "method",
            "name": "setTransform",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rotation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "regX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "regY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 627,
            "description": "Returns a matrix based on this object's transform.",
            "itemtype": "method",
            "name": "getMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "Optional. A Matrix2D object to populate with the calculated values. If null, a new\nMatrix object is returned.",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "A matrix representing this display object's transform.",
                "type": "Matrix2D"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 639,
            "description": "Generates a concatenated Matrix2D object representing the combined transform of\nthe display object and all of its parent Containers up to the highest level ancestor\n(usually the stage). This can be used to transform positions between coordinate spaces,\nsuch as with localToGlobal and globalToLocal.",
            "itemtype": "method",
            "name": "getConcatenatedMatrix",
            "params": [
                {
                    "name": "mtx",
                    "description": "Optional. A Matrix2D object to populate with the calculated values. If null, a new\nMatrix object is returned.",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "a concatenated Matrix2D object representing the combined transform of\nthe display object and all of its parent Containers up to the highest level ancestor (usually the stage).",
                "type": "Matrix2D"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 661,
            "description": "Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at\nthe specified position). This ignores the alpha, shadow and compositeOperation of the display object, and all\ntransform properties including regX/Y.",
            "itemtype": "method",
            "name": "hitTest",
            "params": [
                {
                    "name": "x",
                    "description": "The x position to check in the display object's local coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position to check in the display object's local coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Boolean indicting whether a visible portion of the DisplayObject intersect the specified\nlocal Point.",
                "type": "Boolean"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 685,
            "description": "Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are\nreverted to their defaults (for example .parent).",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current DisplayObject instance.",
                "type": "DisplayObject"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 697,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 709,
            "itemtype": "method",
            "name": "cloneProps",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "o",
                    "description": "The DisplayObject instance which will have properties from the current DisplayObject\ninstance copied into.",
                    "type": "DisplayObject"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 737,
            "itemtype": "method",
            "name": "_applyShadow",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "shadow",
                    "description": "",
                    "type": "Shadow"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 752,
            "itemtype": "method",
            "name": "_tick",
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 760,
            "itemtype": "method",
            "name": "_testHit",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 777,
            "itemtype": "method",
            "name": "_applyFilters",
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 46,
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "scope",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 84,
            "description": "Returns a CSS compatible color string based on the specified RGB numeric color values in the format \n\"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\". For example,\nGraphics.getRGB(50, 100, 150, 0.5) will return \"rgba(50,100,150,0.5)\". It also supports passing a single hex color \nvalue as the first param, and an optional alpha value as the second param. For example, Graphics.getRGB(0xFF00FF, 0.2)\nwill return \"rgba(255,0,255,0.2)\".",
            "itemtype": "method",
            "name": "getRGB",
            "static": 1,
            "params": [
                {
                    "name": "r",
                    "description": "The red component for the color, between 0 and 0xFF (255).",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "The green component for the color, between 0 and 0xFF (255).",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "The blue component for the color, between 0 and 0xFF (255).",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "Optional. The alpha component for the color where 0 is fully transparent and 1 is fully opaque.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A CSS compatible color string based on the specified RGB numeric color values in the format \n\"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\"."
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 113,
            "description": "Returns a CSS compatible color string based on the specified HSL numeric color values in the format \"hsla(360,100,100,1.0)\", \nor if alpha is null then in the format \"hsl(360,100,100)\". For example, Graphics.getHSL(150, 100, 70) will return \n\"hsl(150,100,70)\".",
            "itemtype": "method",
            "name": "getHSL",
            "static": 1,
            "params": [
                {
                    "name": "hue",
                    "description": "The hue component for the color, between 0 and 360.",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "The saturation component for the color, between 0 and 100.",
                    "type": "Number"
                },
                {
                    "name": "lightness",
                    "description": "The lightness component for the color, between 0 and 100.",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "Optional. The alpha component for the color where 0 is fully transparent and 1 is fully opaque.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a CSS compatible color string based on the specified HSL numeric color values in the format \n\"hsla(360,100,100,1.0)\", or if alpha is null then in the format \"hsl(360,100,100)\". For example, \nGraphics.getHSL(150, 100, 70) will return \"hsl(150,100,70)\"."
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 135,
            "description": "Map of Base64 characters to values. Used by decodePath().",
            "itemtype": "property",
            "name": "BASE_64",
            "static": 1,
            "final": 1,
            "type": "Object",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 145,
            "description": "Maps numeric values for the caps parameter of setStrokeStyle to corresponding string values.\nThis is primarily for use with the tiny API. The mappings are as follows: 0 to \"butt\",\n1 to \"round\", and 2 to \"square\".\nFor example, myGraphics.ss(16, 2) would set the line caps to \"square\".",
            "itemtype": "property",
            "name": "STROKE_CAPS_MAP",
            "static": 1,
            "final": 1,
            "type": "Array[String]",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 157,
            "description": "Maps numeric values for the joints parameter of setStrokeStyle to corresponding string values.\nThis is primarily for use with the tiny API. The mappings are as follows: 0 to \"miter\",\n1 to \"round\", and 2 to \"bevel\".\nFor example, myGraphics.ss(16, 0, 2) would set the line joints to \"bevel\".",
            "itemtype": "property",
            "name": "STROKE_JOINTS_MAP",
            "static": 1,
            "final": 1,
            "type": "Array[String]",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 169,
            "itemtype": "property",
            "name": "_ctx",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "type": "CanvasRenderingContext2D",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 177,
            "itemtype": "property",
            "name": "beginCmd",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "type": "Command",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 185,
            "itemtype": "property",
            "name": "fillCmd",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "type": "Command",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 193,
            "itemtype": "property",
            "name": "strokeCmd",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "type": "Command",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 204,
            "itemtype": "property",
            "name": "_strokeInstructions",
            "access": "protected",
            "tagname": "",
            "type": "Array[Command]",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 211,
            "itemtype": "property",
            "name": "_strokeStyleInstructions",
            "access": "protected",
            "tagname": "",
            "type": "Array[Command]",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 218,
            "itemtype": "property",
            "name": "_fillInstructions",
            "access": "protected",
            "tagname": "",
            "type": "Array[Command]",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 225,
            "itemtype": "property",
            "name": "_instructions",
            "access": "protected",
            "tagname": "",
            "type": "Array[Command]",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 232,
            "itemtype": "property",
            "name": "_oldInstructions",
            "access": "protected",
            "tagname": "",
            "type": "Array[Command]",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 239,
            "itemtype": "property",
            "name": "_activeInstructions",
            "access": "protected",
            "tagname": "",
            "type": "Array[Command]",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 246,
            "itemtype": "property",
            "name": "_active",
            "access": "protected",
            "tagname": "",
            "type": "Boolean",
            "default": "false",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 254,
            "itemtype": "property",
            "name": "_dirty",
            "access": "protected",
            "tagname": "",
            "type": "Boolean",
            "default": "false",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 262,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "instructions",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 273,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 288,
            "description": "Draws only the path described for this Graphics instance, skipping any\nnon-path instructions, including fill and stroke descriptions.\nUsed by DisplayObject.clippingPath to draw the clipping path, for example.",
            "itemtype": "method",
            "name": "drawAsPath",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 305,
            "description": "Moves the drawing point to the specified position.",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate the drawing point should move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate the drawing point should move to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 317,
            "description": "Draws a line from the current drawing point to the specified position, which become the new current drawing point. \nFor detailed information, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#complex-shapes-(paths)\">\nwhatwg spec</a>.",
            "itemtype": "method",
            "name": "lineTo",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate the drawing point should draw to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate the drawing point should draw to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 333,
            "description": "Draws an arc with the specified control points and radius.  For detailed information, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arcto\">\nwhatwg spec</a>.",
            "itemtype": "method",
            "name": "arcTo",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 351,
            "description": "Draws an arc defined by the radius, startAngle and endAngle arguments, centered at the position (x, y). For example \narc(100, 100, 20, 0, Math.PI*2) would draw a full circle with a radius of 20 centered at (100, 100). For detailed \ninformation, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arc\">whatwg spec</a>.",
            "itemtype": "method",
            "name": "arc",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "startAngle",
                    "description": "Measured in radians.",
                    "type": "Number"
                },
                {
                    "name": "endAngle",
                    "description": "Measured in radians.",
                    "type": "Number"
                },
                {
                    "name": "anticlockwise",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 372,
            "description": "Draws a quadratic curve from the current drawing point to (x, y) using the control point (cpx, cpy).  For detailed information, \nread the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-quadraticcurveto\">\nwhatwg spec</a>.",
            "itemtype": "method",
            "name": "quadraticCurveTo",
            "params": [
                {
                    "name": "cpx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cpy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 389,
            "description": "Draws a bezier curve from the current drawing point to (x, y) using the control points (cp1x, cp1y) and (cp2x, cp2y).  \nFor detailed information, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-beziercurveto\">\nwhatwg spec</a>.\nmethod @bezierCurveTo",
            "params": [
                {
                    "name": "cp1x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp1y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp2x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp2y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 409,
            "description": "Draws a rectangle at (x, y) with the specified width and height using the current fill and/or stroke.\n For detailed information, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-rect\">\nwhatwg spec</a>.",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the rectangle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 427,
            "description": "Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified\nsince the fill or stroke was last set.",
            "itemtype": "method",
            "name": "closePath",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 443,
            "description": "Clears all drawing instructions, effectively reseting this Graphics instance.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 457,
            "description": "Begins a fill with the specified color. This ends the current subpath.",
            "itemtype": "method",
            "name": "beginFill",
            "params": [
                {
                    "name": "color",
                    "description": "A CSS compatible color value (ex. \"#FF0000\" or \"rgba(255,0,0,0.5)\"). Setting to null will \nresult in no fill.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 470,
            "description": "Begins a linear gradient fill defined by the line (x0, y0) to (x1, y1). This ends the current subpath. For example, the\nfollowing code defines a black to white vertical gradient ranging from 20px to 120px, and draws a square to display it:<br/>\nmyGraphics.beginLinearGradientFill([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);",
            "itemtype": "method",
            "name": "beginLinearGradientFill",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient \ndrawing from red to blue.",
                    "type": "Array[String]"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw \nthe first color to 10% then interpolating to the second color at 90%.",
                    "type": "Array[Number]"
                },
                {
                    "name": "x0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 495,
            "description": "Begins a radial gradient fill. This ends the current subpath. For example, the following code defines a red to blue radial \ngradient centered at (100, 100), with a radius of 50, and draws a circle to display it:<br/>\nmyGraphics.beginRadialGradientFill([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);",
            "itemtype": "method",
            "name": "beginRadialGradientFill",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient \ndrawing from red to blue.",
                    "type": "Array[String]"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would \ndraw the first color to 10% then interpolating to the second color at 90%.",
                    "type": "Array[Number]"
                },
                {
                    "name": "x0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r0",
                    "description": "Radius of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r1",
                    "description": "Radius of the outer circle that defines the gradient.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 522,
            "description": "Begins a pattern fill using the specified image. This ends the current subpath.",
            "itemtype": "method",
            "name": "beginBitmapFill",
            "params": [
                {
                    "name": "image",
                    "description": "The Image, Canvas, or Video object to use as the pattern."
                },
                {
                    "name": "repetition",
                    "description": "Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\", \"repeat-x\",\n\"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 538,
            "description": "Ends the current subpath, and begins a new one with no fill. Functionally identical to beginFill(null).",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 546,
            "description": "Sets the stroke style for the current subpath. Like all drawing methods, this can be chained, so you can define the stroke style and color in a single line of code like so:\nmyGraphics.setStrokeStyle(8,\"round\").beginStroke(\"#F00\");",
            "itemtype": "method",
            "name": "setStrokeStyle",
            "params": [
                {
                    "name": "thickness",
                    "description": "The width of the stroke."
                },
                {
                    "name": "caps",
                    "description": "Optional. Indicates the type of caps to use at the end of lines. One of butt, round, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with the tiny API."
                },
                {
                    "name": "joints",
                    "description": "Optional. Specifies the type of joints that should be used where two lines meet. One of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel) for use with the tiny API."
                },
                {
                    "name": "miter",
                    "description": "Optional. If joints is set to \"miter\", then you can specify a miter limit ratio which controls at what point a mitered joint will be clipped."
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 567,
            "description": "Begins a stroke with the specified color. This ends the current subpath.",
            "itemtype": "method",
            "name": "beginStroke",
            "params": [
                {
                    "name": "color",
                    "description": "A CSS compatible color value (ex. \"#FF0000\" or \"rgba(255,0,0,0.5)\"). Setting to null will result in no stroke."
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 579,
            "description": "Begins a linear gradient stroke defined by the line (x0, y0) to (x1, y1). This ends the current subpath. For example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a square to display it:<br/>\nmyGraphics.setStrokeStyle(10).beginLinearGradientStroke([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);",
            "itemtype": "method",
            "name": "beginLinearGradientStroke",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient drawing from red to blue."
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw the first color to 10% then interpolating to the second color at 90%."
                },
                {
                    "name": "x0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size."
                },
                {
                    "name": "y0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size."
                },
                {
                    "name": "x1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size."
                },
                {
                    "name": "y1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size."
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 602,
            "description": "Begins a radial gradient stroke. This ends the current subpath. For example, the following code defines a red to blue radial gradient centered at (100, 100), with a radius of 50, and draws a rectangle to display it:<br/>\nmyGraphics.setStrokeStyle(10).beginRadialGradientStroke([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50).drawRect(50, 90, 150, 110);",
            "itemtype": "method",
            "name": "beginRadialGradientStroke",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient drawing from red to blue."
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color to 100%."
                },
                {
                    "name": "x0",
                    "description": "Center position of the inner circle that defines the gradient."
                },
                {
                    "name": "y0",
                    "description": "Center position of the inner circle that defines the gradient."
                },
                {
                    "name": "r0",
                    "description": "Radius of the inner circle that defines the gradient."
                },
                {
                    "name": "x1",
                    "description": "Center position of the outer circle that defines the gradient."
                },
                {
                    "name": "y1",
                    "description": "Center position of the outer circle that defines the gradient."
                },
                {
                    "name": "r1",
                    "description": "Radius of the outer circle that defines the gradient."
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 626,
            "description": "Begins a pattern fill using the specified image. This ends the current subpath.",
            "itemtype": "method",
            "name": "beginBitmapStroke",
            "params": [
                {
                    "name": "image",
                    "description": "The Image, Canvas, or Video object to use as the pattern.",
                    "type": "Image | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "repetition",
                    "description": "Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\", \"repeat-x\",\n\"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 642,
            "description": "Ends the current subpath, and begins a new one with no stroke. Functionally identical to beginStroke(null).",
            "itemtype": "method",
            "name": "endStroke",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 652,
            "description": "Maps the familiar ActionScript curveTo() method to the functionally similar quatraticCurveTo() method.",
            "itemtype": "property",
            "name": "curveTo",
            "type": "Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 659,
            "description": "Maps the familiar ActionScript drawRect() method to the functionally similar rect() method.",
            "itemtype": "property",
            "name": "drawRect",
            "type": "Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 666,
            "description": "Draws a rounded rectangle with all corners with the specified radius.",
            "itemtype": "method",
            "name": "drawRoundRect",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Corner radius.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 681,
            "description": "Draws a rounded rectangle with different corner radiuses.",
            "itemtype": "method",
            "name": "drawRoundRectComplex",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radiusTL",
                    "description": "Top left corner radius.",
                    "type": "Number"
                },
                {
                    "name": "radiusTR",
                    "description": "Top right corner radius.",
                    "type": "Number"
                },
                {
                    "name": "radiusBR",
                    "description": "Bottom right corner radius.",
                    "type": "Number"
                },
                {
                    "name": "radiusBL",
                    "description": "Bottom left corner radius.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 720,
            "description": "Draws a circle with the specified radius at (x, y).\n\n<pre><code>var g = new Graphics();\n\tg.setStrokeStyle(1);\n\tg.beginStroke(Graphics.getRGB(0,0,0));\n\tg.beginFill(Graphics.getRGB(255,0,0));\n\tg.drawCircle(0,0,3);\n\n\tvar s = new Shape(g);\n\t\ts.x = 100;\n\t\ts.y = 100;\n\n\tstage.addChild(s);\n\tstage.update();</code></pre>",
            "itemtype": "method",
            "name": "drawCircle",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate center point of circle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y coordinate center point of circle.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Radius of circle.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 746,
            "description": "Draws an ellipse (oval).",
            "itemtype": "method",
            "name": "drawEllipse",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 775,
            "description": "Draws a star if pointSize is greater than 0 or a regular polygon if pointSize is 0 with the specified number of points.\nFor example, the following code will draw a familiar 5 pointed star shape centered at 100, 100 and with a radius of 50:\nmyGraphics.beginFill(\"#FF0\").drawPolyStar(100, 100, 50, 5, 0.6, -90); // -90 makes the first point vertical",
            "itemtype": "method",
            "name": "drawPolyStar",
            "params": [
                {
                    "name": "x",
                    "description": "Position of the center of the shape.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Position of the center of the shape.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "The outer radius of the shape.",
                    "type": "Number"
                },
                {
                    "name": "sides",
                    "description": "The number of points on the star or sides on the polygon.",
                    "type": "Number"
                },
                {
                    "name": "pointSize",
                    "description": "The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular polygon (no points), \na pointSize of 1 will draw nothing because the points are infinitely pointy.",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "The angle of the first point / corner. For example a value of 0 will draw the first point directly to the \nright of the center.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 810,
            "description": "Decodes a compact encoded path string into a series of draw instructions.\nThis format is not intended to be human readable, and is meant for use by authoring tools.\nThe format uses a base64 character set, with each character representing 6 bits, to define a series of draw commands.\n<br/><br/>\nEach command is comprised of a single \"header\" character followed by a variable number of alternating x and y position values.\nReading the header bits from left to right (most to least significant): bits 1 to 3 specify the type of operation\n(0-moveTo, 1-lineTo, 2-quadraticCurveTo, 3-bezierCurveTo, 4-7 unused). Bit 4 indicates whether position values use 12 bits (2 characters) \nor 18 bits (3 characters), with a one indicating the latter. Bits 5 and 6 are currently unused.\n<br/><br/>\nFollowing the header is a series of 2 (moveTo, lineTo), 4 (quadraticCurveTo), or 6 (bezierCurveTo) parameters.\nThese parameters are alternating x/y positions represented by 2 or 3 characters (as indicated by the 4th bit in the command char).\nThese characters consist of a 1 bit sign (1 is negative, 0 is positive), followed by an 11 (2 char) or 17 (3 char) bit integer value.\nAll position values are in tenths of a pixel.\nExcept in the case of move operations, this value is a delta from the previous x or y position (as appropriate).\n<br/><br/>\nFor example, the string \"A3cAAMAu4AAA\" represents a line starting at -150,0 and ending at 150,0.\nA - bits 000000. First 3 bits (000) indicate a moveTo operation. 4th bit (0) indicates 2 chars per parameter.\nn0 - 110111011100. Absolute x position of -150.0px. First bit indicates a negative value, remaining bits indicate 1500 tenths of a pixel. \nAA - 000000000000. Absolute y position of 0.\nI - 001100. First 3 bits (001) indicate a lineTo operation. 4th bit (1) indicates 3 chars per parameter.\nAu4 - 000000101110111000. An x delta of 300.0px, which is added to the previous x value of -150.0px to provide an absolute position of +150.0px.\nAAA - 000000000000000000. A y delta value of 0.",
            "itemtype": "method",
            "name": "decodePath",
            "params": [
                {
                    "name": "str",
                    "description": "The path string to decode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 873,
            "description": "Returns a clone of this Graphics instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current Graphics instance.",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 892,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 903,
            "itemtype": "property",
            "name": "mt",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 910,
            "itemtype": "property",
            "name": "lt",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 917,
            "itemtype": "property",
            "name": "at",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 924,
            "itemtype": "property",
            "name": "bt",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 931,
            "itemtype": "property",
            "name": "qt",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 938,
            "itemtype": "property",
            "name": "a",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 945,
            "itemtype": "property",
            "name": "r",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 952,
            "itemtype": "property",
            "name": "cp",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 959,
            "itemtype": "property",
            "name": "c",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 966,
            "itemtype": "property",
            "name": "f",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 973,
            "itemtype": "property",
            "name": "lf",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 980,
            "itemtype": "property",
            "name": "rf",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 987,
            "itemtype": "property",
            "name": "bf",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 994,
            "itemtype": "property",
            "name": "ef",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1001,
            "itemtype": "property",
            "name": "ss",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1008,
            "itemtype": "property",
            "name": "s",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1015,
            "itemtype": "property",
            "name": "ls",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1022,
            "itemtype": "property",
            "name": "rs",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1029,
            "itemtype": "property",
            "name": "bs",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1036,
            "itemtype": "property",
            "name": "es",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1043,
            "itemtype": "property",
            "name": "dr",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1050,
            "itemtype": "property",
            "name": "rr",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1057,
            "itemtype": "property",
            "name": "rc",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1064,
            "itemtype": "property",
            "name": "dc",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1071,
            "itemtype": "property",
            "name": "de",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1078,
            "itemtype": "property",
            "name": "dp",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1085,
            "itemtype": "property",
            "name": "p",
            "access": "protected",
            "tagname": "type Function",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1094,
            "itemtype": "method",
            "name": "_updateInstructions",
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1116,
            "itemtype": "method",
            "name": "_newPath",
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1128,
            "description": "used to create Commands that set properties",
            "itemtype": "method",
            "name": "_setProp",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 51,
            "description": "Read-only. The MovieClip will advance independently of its parent, even if its parent is paused.\nThis is the default mode.",
            "itemtype": "property",
            "name": "INDEPENDENT",
            "static": 1,
            "type": "String",
            "default": "\"independent\"",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 61,
            "description": "Read-only. The MovieClip will only display a single frame (as determined by the startPosition property).",
            "itemtype": "property",
            "name": "SINGLE_FRAME",
            "static": 1,
            "type": "String",
            "default": "\"single\"",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 70,
            "description": "Read-only. The MovieClip will be advanced only when it's parent advances and will be synched to the position of\nthe parent MovieClip.",
            "itemtype": "property",
            "name": "SYNCHED",
            "static": 1,
            "type": "String",
            "default": "\"synched\"",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 82,
            "description": "Controls how this MovieClip advances its time. Must be one of 0 (INDEPENDENT), 1 (SINGLE_FRAME), or 2 (SYNCHED).\nSee each constant for a description of the behaviour.",
            "itemtype": "property",
            "name": "mode",
            "type": "String",
            "default": "null",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 91,
            "description": "Specifies what the first frame to play in this movieclip, or the only frame to display if mode is SINGLE_FRAME.",
            "itemtype": "property",
            "name": "startPosition",
            "type": "Number",
            "default": "0",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 99,
            "description": "Indicates whether this MovieClip should loop when it reaches the end of its timeline.",
            "itemtype": "property",
            "name": "loop",
            "type": "Boolean",
            "default": "true",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 107,
            "description": "The TweenJS Timeline that is associated with this MovieClip. This is created automatically when the MovieClip\ninstance is initialized.",
            "itemtype": "property",
            "name": "timeline",
            "type": "Timeline",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 115,
            "description": "If true, the MovieClip's position will not advance when ticked.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 122,
            "description": "If true, actions in this MovieClip's tweens will be run when the playhead advances.",
            "itemtype": "property",
            "name": "actionsEnabled",
            "type": "Boolean",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 131,
            "itemtype": "property",
            "name": "_synchOffset",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 139,
            "itemtype": "property",
            "name": "_prevPos",
            "type": "Number",
            "default": "-1",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 147,
            "itemtype": "property",
            "name": "_prevPosition",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 155,
            "description": "List of display objects that are actively being managed by the MovieClip.",
            "itemtype": "property",
            "name": "_managed",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 165,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 172,
            "description": "Initialization method called by the constructor.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 188,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 199,
            "itemtype": "property",
            "name": "Container_draw",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 206,
            "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 224,
            "description": "Sets paused to false.",
            "itemtype": "method",
            "name": "play",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 232,
            "description": "Sets paused to true.",
            "itemtype": "method",
            "name": "stop",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 240,
            "description": "Advances this movie clip to the specified position or label and sets paused to false.",
            "itemtype": "method",
            "name": "gotoAndPlay",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": ""
                }
            ],
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 250,
            "description": "Advances this movie clip to the specified position or label and sets paused to true.",
            "itemtype": "method",
            "name": "gotoAndStop",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": ""
                }
            ],
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 260,
            "description": "MovieClip instances cannot be cloned.",
            "itemtype": "method",
            "name": "clone",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 269,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 280,
            "itemtype": "property",
            "name": "Container__tick",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 287,
            "itemtype": "method",
            "name": "_tick",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 298,
            "itemtype": "method",
            "name": "_goto",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 309,
            "itemtype": "method",
            "name": "_reset",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 317,
            "itemtype": "method",
            "name": "_updateTimeline",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 367,
            "itemtype": "method",
            "name": "_setState",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 382,
            "description": "Adds a child to the timeline, and sets it up as a managed child.",
            "itemtype": "method",
            "name": "_addManagedChild",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 413,
            "itemtype": "method",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 419,
            "itemtype": "method",
            "name": "install",
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 427,
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 435,
            "itemtype": "method",
            "name": "tween",
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 46,
            "description": "An identity shadow object (all properties are set to 0). Read-only.",
            "itemtype": "property",
            "name": "identity",
            "type": "Shadow",
            "static": 1,
            "final": 1,
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 56,
            "description": "property color",
            "type": "String",
            "default": "null",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 63,
            "description": "property offsetX",
            "type": "Number",
            "default": "0",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 70,
            "description": "property offsetY",
            "type": "Number",
            "default": "0",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 77,
            "description": "property blur",
            "type": "Number",
            "default": "0",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 85,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "color",
                    "description": "The color of the shadow.",
                    "type": "String"
                },
                {
                    "name": "offsetX",
                    "description": "The x offset of the shadow.",
                    "type": "Number"
                },
                {
                    "name": "offsetY",
                    "description": "The y offset of the shadow.",
                    "type": "Number"
                },
                {
                    "name": "blur",
                    "description": "The size of the blurring effect.",
                    "type": "Number"
                }
            ],
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 102,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 112,
            "description": "Returns a clone of this Shadow instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current Shadow instance.",
                "type": "Shadow"
            },
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 45,
            "description": "The graphics instance to display.",
            "itemtype": "property",
            "name": "graphics",
            "type": "Graphics",
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 53,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 60,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize!~YUIDOC_LINE~!param  graphics",
            "type": "Graphics",
            "access": "protected",
            "tagname": "",
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 71,
            "description": "Returns true or false indicating whether the Shape would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the Shape would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 82,
            "itemtype": "property",
            "name": "DisplayObject_draw",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 89,
            "description": "Draws the Shape into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache. \nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 105,
            "description": "Returns a clone of this Shape. Some properties that are specific to this instance's current context are reverted to \ntheir defaults (for example .parent).",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "recursive",
                    "description": "If true, this Shape's Graphics instance will also be cloned. If false, the Graphics instance \nwill be shared with the new Shape.",
                    "type": "Boolean"
                }
            ],
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 118,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 118,
            "description": "Read-only property indicating whether all images are finished loading.",
            "itemtype": "property",
            "name": "complete",
            "type": "Boolean",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 126,
            "description": "The onComplete callback is called when all images are loaded. Note that this only fires if the images\nwere not fully loaded when the sprite sheet was initialized. You should check the complete property \nto prior to adding an onComplete handler. Ex.\n<pre><code>var sheet = new SpriteSheet(data);\nif (!sheet.complete) {\n &nbsp; // not preloaded, listen for onComplete:\n &nbsp; sheet.onComplete = handler;\n}</code></pre>",
            "itemtype": "event",
            "name": "onComplete",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 141,
            "itemtype": "property",
            "name": "_animations",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 147,
            "itemtype": "property",
            "name": "_frames",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 153,
            "itemtype": "property",
            "name": "_images",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 159,
            "itemtype": "property",
            "name": "_data",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 165,
            "itemtype": "property",
            "name": "_loadCount",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 172,
            "itemtype": "property",
            "name": "_frameHeight",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 178,
            "itemtype": "property",
            "name": "_frameWidth",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 184,
            "itemtype": "property",
            "name": "_numFrames",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 190,
            "itemtype": "property",
            "name": "_regX",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 196,
            "itemtype": "property",
            "name": "_regY",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 203,
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 282,
            "description": "Returns the total number of frames in the specified animation, or in the whole sprite\nsheet if the animation param is omitted.",
            "params": [
                {
                    "name": "animation",
                    "description": "The name of the animation to get a frame count for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The number of frames in the animation, or in the entire sprite sheet if the animation param is omitted.",
                "type": "Number"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 298,
            "description": "Returns an array of all available animation names as strings.",
            "itemtype": "method",
            "name": "getAnimations",
            "return": {
                "description": "an array of animation names available on this sprite sheet.",
                "type": "Array"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 307,
            "description": "Returns an object defining the specified animation. The returned object has a\nframes property containing an array of the frame id's in the animation, a frequency\nproperty indicating the advance frequency for this animation, a name property, \nand a next property, which specifies the default next animation. If the animation\nloops, the name and next property will be the same.",
            "itemtype": "method",
            "name": "getAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation to get."
                }
            ],
            "return": {
                "description": "a generic object with frames, frequency, name, and next properties.",
                "type": "Object"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 321,
            "description": "Returns an object specifying the image and source rect of the specified frame. The returned object\nhas an image property holding a reference to the image object in which the frame is found,\nand a rect property containing a Rectangle instance which defines the boundaries for the\nframe within that image.",
            "itemtype": "method",
            "name": "getFrame",
            "params": [
                {
                    "name": "frameIndex",
                    "description": "The index of the frame.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a generic object with image and rect properties. Returns null if the frame does not exist, or the image is not fully loaded.",
                "type": "Object"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 335,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 344,
            "description": "Returns a clone of the SpriteSheet instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the SpriteSheet instance.",
                "type": "SpriteSheet"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 365,
            "itemtype": "method",
            "name": "_handleImageLoad",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 377,
            "itemtype": "method",
            "name": "_calculateFrames",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 45,
            "itemtype": "property",
            "name": "_snapToPixelEnabled",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "type": "Boolean",
            "default": "false",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 55,
            "description": "Indicates whether the stage should automatically clear the canvas before each render. You can set this to false to manually\ncontrol clearing (for generative art, or when pointing multiple stages at the same canvas for example).",
            "itemtype": "property",
            "name": "autoClear",
            "type": "Boolean",
            "default": "true",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 64,
            "description": "first stage that will be ticked (or they will clear each other's render).",
            "itemtype": "property",
            "name": "canvas",
            "type": "HTMLCanvasElement",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 71,
            "description": "READ-ONLY. The current mouse X position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\nposition over the canvas, and mouseInBounds will be set to false.",
            "itemtype": "property",
            "name": "mouseX",
            "type": "Number",
            "final": 1,
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 80,
            "description": "position over the canvas, and mouseInBounds will be set to false.",
            "itemtype": "property",
            "name": "mouseY",
            "type": "Number",
            "final": 1,
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 88,
            "description": "containing the corresponding MouseEvent instance.",
            "itemtype": "event",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "A MouseEvent instance with information about the current mouse event.",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 95,
            "description": "The onMouseUp callback is called when the user releases the mouse button anywhere that the page can detect it.  The handler\nis passed a single param containing the corresponding MouseEvent instance.",
            "itemtype": "event",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "A MouseEvent instance with information about the current mouse event.",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 103,
            "description": "The onMouseDown callback is called when the user presses the mouse button over the canvas.  The handler is passed a single\nparam containing the corresponding MouseEvent instance.",
            "itemtype": "event",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "A MouseEvent instance with information about the current mouse event.",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 111,
            "description": "Indicates whether this stage should use the snapToPixel property of display objects when rendering them. See\nDisplayObject.snapToPixel for more information.",
            "itemtype": "property",
            "name": "snapToPixelEnabled",
            "type": "Boolean",
            "default": "false",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 120,
            "itemtype": "property",
            "name": "mouseInBounds",
            "type": "Boolean",
            "default": "false",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 127,
            "itemtype": "property",
            "name": "tickOnUpdate",
            "type": "Boolean",
            "default": "false",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 136,
            "itemtype": "property",
            "name": "_activeMouseEvent",
            "access": "protected",
            "tagname": "",
            "type": "MouseEvent",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 143,
            "itemtype": "property",
            "name": "_activeMouseTarget",
            "access": "protected",
            "tagname": "",
            "type": "DisplayObject",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 150,
            "itemtype": "property",
            "name": "_mouseOverIntervalID",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 157,
            "itemtype": "property",
            "name": "_mouseOverX",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 164,
            "itemtype": "property",
            "name": "_mouseOverY",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 171,
            "itemtype": "property",
            "name": "_mouseOverTarget",
            "access": "protected",
            "tagname": "",
            "type": "DisplayObject",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 179,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 186,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize!~YUIDOC_LINE~!param  canvas A canvas object, or the string id of a canvas object in the current document.",
            "type": "HTMLCanvasElement",
            "access": "protected",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 200,
            "itemtype": "event",
            "name": "tick\nBroadcast to children when the stage is updated.",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 205,
            "description": "Each time the update method is called, the stage will tick any descendants exposing a tick method (ex. BitmapAnimation)\nand render its entire display list to the canvas.",
            "itemtype": "method",
            "name": "update",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 220,
            "description": "Calls the update method. Useful for adding stage as a listener to Ticker directly.",
            "itemtype": "property",
            "name": "tick",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 228,
            "description": "Clears the target canvas. Useful if autoClear is set to false.",
            "itemtype": "method",
            "name": "clear",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 239,
            "description": "Returns a data url that contains a Base64 encoded image of the contents of the stage. The returned data url can be\nspecified as the src value of an image element.",
            "itemtype": "method",
            "name": "toDataURL",
            "params": [
                {
                    "name": "backgroundColor",
                    "description": "The background color to be used for the generated image. The value can be any value HTML color\nvalue, including HEX colors, rgb and rgba. The default value is a transparent background.",
                    "type": "String"
                },
                {
                    "name": "mimeType",
                    "description": "The MIME type of the image format to be create. The default is \"image/png\". If an unknown MIME type\nis passed in, or if the browser does not support the specified MIME type, the default value will be used.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a Base64 encoded image.",
                "type": "String"
            },
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 295,
            "description": "Enables or disables (by passing a frequency of 0) mouse over handlers (onMouseOver and onMouseOut) for this stage's display\nlist. These events can be expensive to generate, so they are disabled by default, and the frequency of the events\ncan be controlled independently of mouse move events via the optional frequency parameter.",
            "itemtype": "method",
            "name": "enableMouseOver",
            "params": [
                {
                    "name": "frequency",
                    "description": "Optional param specifying the maximum number of times per second to broadcast mouse over/out events. Set to 0 to disable mouse\nover events completely. Maximum is 50. A lower frequency is less responsive, but uses less CPU. Default is 20.",
                    "type": "Number"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 316,
            "description": "Returns a clone of this Stage.",
            "return": {
                "description": "A clone of the current Container instance.",
                "type": "Stage"
            },
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 326,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 337,
            "itemtype": "method",
            "name": "_enableMouseEvents",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "enabled",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 352,
            "itemtype": "method",
            "name": "_handleMouseMove",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 375,
            "itemtype": "method",
            "name": "_updateMousePosition",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "pageX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pageY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 397,
            "itemtype": "method",
            "name": "_handleMouseUp",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 414,
            "itemtype": "method",
            "name": "_handleMouseDown",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 434,
            "itemtype": "method",
            "name": "_testMouseOver",
            "access": "protected",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 458,
            "itemtype": "method",
            "name": "_handleDoubleClick",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 51,
            "itemtype": "property",
            "name": "_workingContext",
            "type": "CanvasRenderingContext2D",
            "access": "private",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 59,
            "description": "The text to display.",
            "itemtype": "property",
            "name": "text",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 66,
            "description": "The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold 36px Arial\").",
            "itemtype": "property",
            "name": "font",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 73,
            "description": "The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex. \"#F00\").",
            "itemtype": "property",
            "name": "color",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 80,
            "description": "The horizontal text alignment. Any of \"start\", \"end\", \"left\", \"right\", and \"center\". For detailed \ninformation view the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-0\">\nwhatwg spec</a>.",
            "itemtype": "property",
            "name": "textAlign",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 90,
            "description": "\"ideographic\", or \"bottom\". For detailed information view the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-0\">\nwhatwg spec</a>.",
            "itemtype": "property",
            "name": "textBaseline",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 99,
            "description": "shrunk to make it fit in this width. For detailed information view the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-0\">\nwhatwg spec</a>.",
            "itemtype": "property",
            "name": "maxWidth",
            "type": "Number",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 108,
            "itemtype": "property",
            "name": "outline",
            "type": "Boolean",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 114,
            "description": "the value of getMeasuredLineHeight is used.",
            "itemtype": "property",
            "name": "lineHeight",
            "type": "Number",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 121,
            "description": "Indicates the maximum width for a line of text before it is wrapped to multiple lines. If null, \nthe text will not be wrapped.",
            "itemtype": "property",
            "name": "lineWidth",
            "type": "Number",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 130,
            "itemtype": "property",
            "name": "DisplayObject_initialize",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 137,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 149,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 160,
            "itemtype": "property",
            "name": "DisplayObject_draw",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 167,
            "description": "Draws the Text into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache. \nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 190,
            "description": "Returns the measured, untransformed width of the text without wrapping.",
            "itemtype": "method",
            "name": "getMeasuredWidth",
            "return": {
                "description": "The measured, untransformed width of the text.",
                "type": "Number"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 199,
            "description": "Returns an approximate line height of the text, ignoring the lineHeight property. This is based \non the measured width of a \"M\" character multiplied by 1.2, which approximates em for most fonts.",
            "itemtype": "method",
            "name": "getMeasuredLineHeight",
            "return": {
                "description": "an approximate line height of the text, ignoring the lineHeight property. This is \nbased on the measured width of a \"M\" character multiplied by 1.2, which approximates em for most fonts.",
                "type": "Number"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 210,
            "description": "Returns the approximate height of multiline text by multiplying the number of lines against\neither the lineHeight (if specified) or getMeasuredLineHeight(). Note that this operation\nrequires the text flowing logic to run, which has an associated CPU cost.",
            "itemtype": "method",
            "name": "getMeasuredHeight",
            "return": {
                "description": "The approximate height of the drawn multiline text.",
                "type": "Number"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 221,
            "description": "Returns a clone of the Point instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Point instance.",
                "type": "Point"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 232,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 243,
            "itemtype": "property",
            "name": "DisplayObject_cloneProps",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 250,
            "itemtype": "method",
            "name": "cloneProps",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "Text"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 265,
            "itemtype": "method",
            "name": "_getWorkingContext",
            "access": "protected",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 277,
            "description": "Draws multiline text.",
            "itemtype": "method",
            "name": "_getWorkingContext",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The number of lines drawn.",
                "type": "Number"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 316,
            "itemtype": "method",
            "name": "_drawTextLine",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "text",
                    "description": "",
                    "type": "Text"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 51,
            "description": "The mouseX position on the stage.",
            "itemtype": "property",
            "name": "stageX",
            "type": "Number",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 58,
            "description": "The mouseY position on the stage.",
            "itemtype": "property",
            "name": "stageY",
            "type": "Number",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 65,
            "description": "The type of mouse event. This will be the same as the handler it maps to (onPress,\nonMouseDown, onMouseUp, onMouseMove, or onClick).",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 73,
            "description": "The native MouseEvent generated by the browser. The properties and API for this\nevent may differ between browsers. This property will be null if the\nEaselJS property was not directly generated from a native MouseEvent.",
            "itemtype": "property",
            "name": "nativeEvent",
            "type": "MouseEvent",
            "default": "null",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 83,
            "description": "For events of type \"onPress\" and \"onMouseDown\" only you can assign a handler to the onMouseMove\nproperty. This handler will be called every time the mouse is moved until the mouse is released.\nThis is useful for operations such as drag and drop.",
            "itemtype": "event",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "A MouseEvent instance with information about the current mouse event.",
                    "type": "MouseEvent"
                }
            ],
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 92,
            "description": "For events of type \"onPress\" and \"onMouseDown\" only you can assign a handler to the onMouseUp\nproperty. This handler will be called every time the mouse is moved until the mouse is released.\nThis is useful for operations such as drag and drop.",
            "itemtype": "event",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "A MouseEvent instance with information about the current mouse event.",
                    "type": "MouseEvent"
                }
            ],
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 101,
            "description": "The display object this event relates to.",
            "itemtype": "property",
            "name": "target",
            "type": "DisplayObject",
            "default": "null",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 110,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 124,
            "description": "Returns a clone of the MouseEvent instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the MouseEvent instance.",
                "type": "MouseEvent"
            },
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 133,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BoxBlurFilter.js",
            "line": 46,
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BoxBlurFilter.js",
            "line": 58,
            "description": "Horizontal blur radius",
            "itemtype": "property",
            "name": "blurX",
            "type": "Number",
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BoxBlurFilter.js",
            "line": 65,
            "description": "Vertical blur radius",
            "itemtype": "property",
            "name": "blurY",
            "type": "Number",
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BoxBlurFilter.js",
            "line": 72,
            "description": "Number of blur iterations. For example, a value of 1 will produce a rough blur.\nA value of 2 will produce a smoother blur, but take twice as long to run.",
            "itemtype": "property",
            "name": "quality",
            "type": "Number",
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BoxBlurFilter.js",
            "line": 81,
            "description": "Returns a rectangle with values indicating the margins required to draw the filter.\nFor example, a filter that will extend the drawing area 4 pixels to the left, and 7 pixels to the right\n(but no pixels up or down) would return a rectangle with (x=-4, y=0, width=11, height=0).",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "a rectangle object indicating the margins required to draw the filter.",
                "type": "Rectangle"
            },
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BoxBlurFilter.js",
            "line": 93,
            "description": "Applies the filter to the specified context.",
            "itemtype": "method",
            "name": "applyFilter",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D context to use as the source."
                },
                {
                    "name": "x",
                    "description": "The x position to use for the source rect."
                },
                {
                    "name": "y",
                    "description": "The y position to use for the source rect."
                },
                {
                    "name": "width",
                    "description": "The width to use for the source rect."
                },
                {
                    "name": "height",
                    "description": "The height to use for the source rect."
                },
                {
                    "name": "targetCtx",
                    "description": "Optional. The 2D context to draw the result to. Defaults to the context passed to ctx."
                },
                {
                    "name": "targetX",
                    "description": "Optional. The x position to draw the result to. Defaults to the value passed to x."
                },
                {
                    "name": "targetY",
                    "description": "Optional. The y position to draw the result to. Defaults to the value passed to y."
                }
            ],
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BoxBlurFilter.js",
            "line": 237,
            "description": "Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are reverted to their defaults (for example .parent).",
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BoxBlurFilter.js",
            "line": 244,
            "description": "Returns a string representation of this object.",
            "class": "BoxBlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 51,
            "description": "Red channel multiplier.",
            "itemtype": "property",
            "name": "redMultiplier",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 58,
            "description": "Green channel multiplier.",
            "itemtype": "property",
            "name": "greenMultiplier",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 65,
            "description": "Blue channel multiplier.",
            "itemtype": "property",
            "name": "blueMultiplier",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 72,
            "description": "Alpha channel multiplier.",
            "itemtype": "property",
            "name": "redMultiplier",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 79,
            "description": "Red channel offset (added to value).",
            "itemtype": "property",
            "name": "redOffset",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 86,
            "description": "Green channel offset (added to value).",
            "itemtype": "property",
            "name": "greenOffset",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 93,
            "description": "Blue channel offset (added to value).",
            "itemtype": "property",
            "name": "blueOffset",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 100,
            "description": "Alpha channel offset (added to value).",
            "itemtype": "property",
            "name": "alphaOffset",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 108,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 125,
            "description": "Applies the filter to the specified context.",
            "itemtype": "method",
            "name": "applyFilter",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D context to use as the source."
                },
                {
                    "name": "x",
                    "description": "The x position to use for the source rect."
                },
                {
                    "name": "y",
                    "description": "The y position to use for the source rect."
                },
                {
                    "name": "width",
                    "description": "The width to use for the source rect."
                },
                {
                    "name": "height",
                    "description": "The height to use for the source rect."
                },
                {
                    "name": "targetCtx",
                    "description": "Optional. The 2D context to draw the result to. Defaults to the context passed to ctx."
                },
                {
                    "name": "targetX",
                    "description": "Optional. The x position to draw the result to. Defaults to the value passed to x."
                },
                {
                    "name": "targetY",
                    "description": "Optional. The y position to draw the result to. Defaults to the value passed to y."
                }
            ],
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 160,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 170,
            "description": "Returns a clone of this ColorFilter instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current ColorFilter instance.",
                "type": "ColorFilter"
            },
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 48,
            "description": "Array of delta values for contrast calculations.",
            "itemtype": "property",
            "name": "DELTA_INDEX",
            "type": "Array",
            "static": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 68,
            "description": "Identity matrix values.",
            "itemtype": "property",
            "name": "IDENTITY_MATRIX",
            "type": "Array",
            "static": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 82,
            "description": "The constant length of a color matrix.",
            "itemtype": "property",
            "name": "LENGTH",
            "type": "Number",
            "static": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 91,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 102,
            "description": "Resets the matrix to identity values.",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 111,
            "description": "Shortcut method to adjust brightness, contrast, saturation and hue.\nEquivalent to calling adjustHue(hue), adjustContrast(contrast),\nadjustBrightness(brightness), adjustSaturation(saturation), in that order.",
            "params": [
                {
                    "name": "brightness",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "contrast",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "hue",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 128,
            "description": "Adjusts the brightness of pixel color by adding the specified value to the red, green and blue channels.\nPositive values will make the image brighter, negative values will make it darker.",
            "params": [
                {
                    "name": "value",
                    "description": "A value between -255 & 255 that will be added to the RGB channels.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 147,
            "description": "Adjusts the contrast of pixel color.\nPositive values will increase contrast, negative values will decrease contrast.",
            "params": [
                {
                    "name": "value",
                    "description": "A value between -100 & 100.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 178,
            "description": "Adjusts the color saturation of the pixel.\nPositive values will increase saturation, negative values will decrease saturation (trend towards greyscale).",
            "params": [
                {
                    "name": "value",
                    "description": "A value between -100 & 100.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 202,
            "description": "Adjusts the hue of the pixel color.",
            "params": [
                {
                    "name": "value",
                    "description": "A value between -180 & 180.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 225,
            "description": "Concatenates (multiplies) the specified matrix with this one.",
            "params": [
                {
                    "name": "matrix",
                    "description": "An array or ColorMatrix instance.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 237,
            "description": "Returns a clone of this ColorMatrix.",
            "return": {
                "description": "A clone of this ColorMatrix.",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 245,
            "description": "Return a length 25 (5x5) array instance containing this matrix's values.",
            "return": {
                "description": "An array holding this matrix's values.",
                "type": "Array"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 253,
            "description": "Copy the specified matrix's values to this matrix.",
            "params": [
                {
                    "name": "matrix",
                    "description": "An array or ColorMatrix instance.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 268,
            "itemtype": "method",
            "name": "_multiplyMatrix",
            "access": "protected",
            "tagname": "",
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 289,
            "description": "Make sure values are within the specified range, hue has a limit of 180, brightness is 255, others are 100.",
            "itemtype": "method",
            "name": "_cleanValue",
            "access": "protected",
            "tagname": "",
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 299,
            "description": "Makes sure matrixes are 5x5 (25 long).",
            "itemtype": "method",
            "name": "_fixMatrix",
            "access": "protected",
            "tagname": "",
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrixFilter.js",
            "line": 48,
            "description": "Allows you to carry out complex color operations such as modifying saturation, brightness, or inverting.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "matrix",
                    "description": "A 4x5 matrix describing the color operation to perform."
                }
            ],
            "class": "ColorMatrixFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrixFilter.js",
            "line": 59,
            "description": "Applies the filter to the specified context.",
            "itemtype": "method",
            "name": "applyFilter",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D context to use as the source."
                },
                {
                    "name": "x",
                    "description": "The x position to use for the source rect."
                },
                {
                    "name": "y",
                    "description": "The y position to use for the source rect."
                },
                {
                    "name": "width",
                    "description": "The width to use for the source rect."
                },
                {
                    "name": "height",
                    "description": "The height to use for the source rect."
                },
                {
                    "name": "targetCtx",
                    "description": "Optional. The 2D context to draw the result to. Defaults to the context passed to ctx."
                },
                {
                    "name": "targetX",
                    "description": "Optional. The x position to draw the result to. Defaults to the value passed to x."
                },
                {
                    "name": "targetY",
                    "description": "Optional. The y position to draw the result to. Defaults to the value passed to y."
                }
            ],
            "class": "ColorMatrixFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrixFilter.js",
            "line": 105,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "ColorMatrixFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrixFilter.js",
            "line": 115,
            "description": "Returns a clone of this ColorMatrixFilter instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current ColorMatrixFilter instance.",
                "type": "ColorMatrixFilter"
            },
            "class": "ColorMatrixFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/Filter.js",
            "line": 42,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/Filter.js",
            "line": 50,
            "description": "Returns a rectangle with values indicating the margins required to draw the filter.\nFor example, a filter that will extend the drawing area 4 pixels to the left, and 7 pixels to the right\n(but no pixels up or down) would return a rectangle with (x=-4, y=0, width=11, height=0).",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "a rectangle object indicating the margins required to draw the filter.",
                "type": "Rectangle"
            },
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/Filter.js",
            "line": 61,
            "description": "Applies the filter to the specified context.",
            "itemtype": "method",
            "name": "applyFilter",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D context to use as the source."
                },
                {
                    "name": "x",
                    "description": "The x position to use for the source rect."
                },
                {
                    "name": "y",
                    "description": "The y position to use for the source rect."
                },
                {
                    "name": "width",
                    "description": "The width to use for the source rect."
                },
                {
                    "name": "height",
                    "description": "The height to use for the source rect."
                },
                {
                    "name": "targetCtx",
                    "description": "Optional. The 2D context to draw the result to. Defaults to the context passed to ctx."
                },
                {
                    "name": "targetX",
                    "description": "Optional. The x position to draw the result to. Defaults to the value passed to x."
                },
                {
                    "name": "targetY",
                    "description": "Optional. The y position to draw the result to. Defaults to the value passed to y."
                }
            ],
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/Filter.js",
            "line": 75,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/Filter.js",
            "line": 85,
            "description": "Returns a clone of this Filter instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current Filter instance.",
                "type": "Filter"
            },
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 49,
            "description": "An identity matrix, representing a null transformation. Read-only.",
            "itemtype": "property",
            "name": "identity",
            "static": 1,
            "type": "Matrix2D",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 57,
            "description": "Multiplier for converting degrees to radians. Used internally by Matrix2D. Read-only.",
            "itemtype": "property",
            "name": "DEG_TO_RAD",
            "static": 1,
            "final": 1,
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 68,
            "description": "Position (0, 0) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "a",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 75,
            "description": "Position (0, 1) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "b",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 82,
            "description": "Position (1, 0) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "c",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 89,
            "description": "Position (1, 1) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "d",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 96,
            "description": "Position (2, 0) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "atx",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 103,
            "description": "Position (2, 1) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "ty",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 110,
            "description": "Property representing the alpha that will be applied to a display object. This is not part of matrix\noperations, but is used for operations like getConcatenatedMatrix to provide concatenated alpha values.",
            "itemtype": "property",
            "name": "alpha",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 118,
            "description": "Property representing the shadow that will be applied to a display object. This is not part of matrix\noperations, but is used for operations like getConcatenatedMatrix to provide concatenated shadow values.",
            "itemtype": "property",
            "name": "shadow",
            "type": "Shadow",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 126,
            "description": "Property representing the compositeOperation that will be applied to a display object. This is not part of\nmatrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated\ncompositeOperation values. You can find a list of valid composite operations at:\n<a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>",
            "itemtype": "property",
            "name": "compositeOperation",
            "type": "String",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 137,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 154,
            "description": "Concatenates the specified matrix properties with this matrix. All parameters are required.",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "tx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 180,
            "description": "Appends the specified matrix properties with this matrix. All parameters are required.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "tx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 206,
            "description": "Prepends the specified matrix with this matrix.",
            "itemtype": "method",
            "name": "prependMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix2D"
                }
            ],
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 217,
            "description": "Appends the specified matrix with this matrix.",
            "itemtype": "method",
            "name": "appendMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 229,
            "description": "Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.\nFor example, you can use this to generate a matrix from a display object: var mtx = new Matrix2D();\nmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);",
            "itemtype": "method",
            "name": "prependTransform",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rotation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "regX",
                    "description": "Optional.",
                    "type": "Number"
                },
                {
                    "name": "regY",
                    "description": "Optional.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 271,
            "description": "Generates matrix properties from the specified display object transform properties, and appends them with this matrix.\nFor example, you can use this to generate a matrix from a display object: var mtx = new Matrix2D();\nmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);",
            "itemtype": "method",
            "name": "appendTransform",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rotation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "regX",
                    "description": "Optional.",
                    "type": "Number"
                },
                {
                    "name": "regY",
                    "description": "Optional.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 315,
            "description": "Applies a rotation transformation to the matrix.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle in degrees.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 338,
            "description": "Applies a skew transformation to the matrix.",
            "itemtype": "method",
            "name": "skew",
            "params": [
                {
                    "name": "skewX",
                    "description": "The amount to skew horizontally in degrees.",
                    "type": "Number"
                },
                {
                    "name": "skewY",
                    "description": "The amount to skew vertically in degrees.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 352,
            "description": "Applies a scale transformation to the matrix.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 367,
            "description": "Translates the matrix on the x and y axes.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 380,
            "description": "Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).",
            "itemtype": "method",
            "name": "identity",
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 392,
            "description": "Inverts the matrix, causing it to perform the opposite transformation.",
            "itemtype": "method",
            "name": "invert",
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 414,
            "description": "Returns true if the matrix is an identity matrix.",
            "itemtype": "method",
            "name": "isIdentity",
            "return": {
                "description": "Boolean"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 423,
            "description": "Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that this these values\nmay not match the transform properties you used to generate the matrix, though they will produce the same visual\nresults.",
            "itemtype": "method",
            "name": "decompose",
            "params": [
                {
                    "name": "target",
                    "description": "The object to apply the transform properties to. If null, then a new object will be returned.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 456,
            "description": "Reinitializes all matrix properties to those specified.",
            "itemtype": "method",
            "name": "appendProperties",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "tx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "desired alpha value",
                    "type": "Number"
                },
                {
                    "name": "shadow",
                    "description": "desired shadow value",
                    "type": "Shadow"
                },
                {
                    "name": "compositeOperation",
                    "description": "desired composite operation value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 478,
            "description": "Appends the specified visual properties to the current matrix.",
            "itemtype": "method",
            "name": "appendProperties",
            "params": [
                {
                    "name": "alpha",
                    "description": "desired alpha value",
                    "type": "Number"
                },
                {
                    "name": "shadow",
                    "description": "desired shadow value",
                    "type": "Shadow"
                },
                {
                    "name": "compositeOperation",
                    "description": "desired composite operation value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 493,
            "description": "Prepends the specified visual properties to the current matrix.",
            "itemtype": "method",
            "name": "prependProperties",
            "params": [
                {
                    "name": "alpha",
                    "description": "desired alpha value",
                    "type": "Number"
                },
                {
                    "name": "shadow",
                    "description": "desired shadow value",
                    "type": "Shadow"
                },
                {
                    "name": "compositeOperation",
                    "description": "desired composite operation value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 508,
            "description": "Returns a clone of the Matrix2D instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Matrix2D instance.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 521,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Point.js",
            "line": 45,
            "description": "X position.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Point.js",
            "line": 52,
            "description": "Y position.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Point.js",
            "line": 60,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Point.js",
            "line": 71,
            "description": "Returns a clone of the Point instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Point instance.",
                "type": "Point"
            },
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Point.js",
            "line": 80,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 46,
            "description": "X position.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 53,
            "description": "Y position.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 60,
            "description": "Width.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 67,
            "description": "Height.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 75,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 88,
            "description": "Returns a clone of the Rectangle instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Rectangle instance.",
                "type": "Rectangle"
            },
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 97,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 41,
            "description": "Enables touch interaction for the specified EaselJS stage. This\ncurrently only supports iOS, and simply maps single touch events\nto the existing EaselJS mouse events.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "A boolean indicating whether touch is supported in the current environment.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 53,
            "description": "Enables touch interaction for the specified EaselJS stage. This\ncurrently only supports iOS, and simply maps single touch events\nto the existing EaselJS mouse events.",
            "itemtype": "method",
            "name": "enable",
            "params": [
                {
                    "name": "stage",
                    "description": "The stage to enable touch on.",
                    "type": "Stage"
                }
            ],
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 80,
            "itemtype": "method",
            "name": "_handleTouchStart",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "TouchEvent"
                }
            ],
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 108,
            "itemtype": "method",
            "name": "_handleTouchMove",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "TouchEvent"
                }
            ],
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 121,
            "itemtype": "method",
            "name": "_handleTouchEnd",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "TouchEvent"
                }
            ],
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 139,
            "itemtype": "method",
            "name": "_findPrimaryTouch",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                },
                {
                    "name": "touches",
                    "description": "",
                    "type": "Array[Touch]"
                }
            ],
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 55,
            "description": "The maximum width for the images (not individual frames) in the generated sprite sheet. It is recommended to use\na power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max dimensions, then\nadditional images will be created as needed.",
            "itemtype": "property",
            "name": "maxWidth",
            "type": "Number",
            "default": "2048",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 65,
            "description": "The maximum height for the images (not individual frames) in the generated sprite sheet. It is recommended to use\na power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max dimensions, then\nadditional images will be created as needed.",
            "itemtype": "property",
            "name": "maxHeight",
            "type": "Number",
            "default": "2048",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 75,
            "description": "The sprite sheet that was generated. This will be null before a build is completed successfully.",
            "itemtype": "property",
            "name": "spriteSheet",
            "type": "SpriteSheet",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 84,
            "itemtype": "property",
            "name": "_frames",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 91,
            "itemtype": "property",
            "name": "_animations",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 98,
            "itemtype": "property",
            "name": "_data",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 105,
            "itemtype": "property",
            "name": "_nextFrameIndex",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 112,
            "itemtype": "property",
            "name": "_index",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 119,
            "itemtype": "property",
            "name": "_callback",
            "access": "protected",
            "tagname": "",
            "type": "Function",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 126,
            "itemtype": "property",
            "name": "_timeSlice",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 133,
            "itemtype": "property",
            "name": "_timerID",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 141,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 153,
            "description": "Adds a frame to the sprite sheet. Note that the frame will not be drawn until you call build. The optional\nsetup params allow you to have a function run immediately before the draw occurs. For example, this allows you to\nadd a single source multiple times, but manipulate it or it's children to change it to generate different frames.\n<br/><br/>\nNote that the source's transformations (x,y,scale,rotate,alpha) will be ignored, except for regX/Y. To apply\ntransforms to a source object and have them captured in the sprite sheet, simply place it into a Container\nand pass in the Container as the source.",
            "itemtype": "method",
            "name": "addFrame",
            "params": [
                {
                    "name": "source",
                    "description": "The source display object to draw as the frame.",
                    "type": "DisplayObject"
                },
                {
                    "name": "sourceRect",
                    "description": "Optional. A rectangle defining the portion of the source to draw to the frame. If\nnot specified, it will look for a getBounds method, bounds property, or nominalBounds property on the source to use.\nIf one is not found, the frame will be skipped.",
                    "type": "Rectangle"
                },
                {
                    "name": "setupFunction",
                    "description": "Optional. A function to call immediately before drawing this frame.",
                    "type": "Function"
                },
                {
                    "name": "setupParams",
                    "description": "Optional. Parameters to pass to the setup function.",
                    "type": "Array"
                },
                {
                    "name": "setupScope",
                    "description": "Optional. The scope to call the setupFunction in.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The index of the frame that was just added, or null if a sourceRect could not be determined.",
                "type": "Number"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 179,
            "description": "Adds an animation that will be included in the created sprite sheet.",
            "itemtype": "method",
            "name": "addFrame",
            "params": [
                {
                    "name": "name",
                    "description": "The name for the animation.",
                    "type": "String"
                },
                {
                    "name": "frames",
                    "description": "An array of frame indexes that comprise the animation. Ex. [3,6,5] would describe an animation\nthat played frame indexes 3, 6, and 5 in that order.",
                    "type": "Array"
                },
                {
                    "name": "next",
                    "description": "Optional. Specifies the name of the animation to continue to after this animation ends. You can\nalso pass false to have the animation stop when it ends. By default it will loop to the start of the same animation.",
                    "type": "String"
                },
                {
                    "name": "frequency",
                    "description": "Optional. Specifies a frame advance frequency for this animation. For example, a value\nof 2 would cause the animation to advance every second tick.",
                    "type": "Number"
                }
            ],
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 195,
            "description": "This will take a MovieClip, and add its frames and labels to this builder. Labels will be added as an animation\nrunning from the label index to the next label. For example, if there is a label named \"foo\" at frame 0 and a label\nnamed \"bar\" at frame 10, in a MovieClip with 15 frames, it will add an animation named \"foo\" that runs from frame\nindex 0 to 9, and an animation named \"bar\" that runs from frame index 10 to 14.\n<br/><br/>\nNote that this will iterate through the full MovieClip with actionsEnabled set to false, ending on the last frame.",
            "itemtype": "method",
            "name": "addMovieClip",
            "params": [
                {
                    "name": "source",
                    "description": "The source MovieClip to add to the sprite sheet.",
                    "type": "MovieClip"
                },
                {
                    "name": "sourceRect",
                    "description": "Optional. A rectangle defining the portion of the source to draw to the frame. If\nnot specified, it will look for a getBounds method, frameBounds array, bounds property, or nominalBounds property\non the source to use. If one is not found, the MovieClip will be skipped.",
                    "type": "Rectangle"
                }
            ],
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 231,
            "description": "Builds a SpriteSheet instance based on the current frames.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "SpriteSheet The created SpriteSheet instance, or null if a build is already running or an error occurred."
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 245,
            "description": "Asynchronously builds a SpriteSheet instance based on the current frames. It will run 20 times per second, using\nan amount of time defined by timeSlice. When it is complete it will call the specified callback.",
            "itemtype": "method",
            "name": "buildAsync",
            "params": [
                {
                    "name": "callback",
                    "description": "Optional. The function to call when the build operation completes. It will be called\nwith a single parameter providing a reference back to the builder.",
                    "type": "Function"
                },
                {
                    "name": "timeSlice",
                    "description": "Optional. A number from 0.01 to 1 that indicates what percentage of time the builder can use. This can be\nthought of as the number of seconds per second the builder will use. For example, with a timeSlice value of 0.3,\nthe builder will run 20 times per second, using approximately 15ms per build (30% of available time, or 0.3s per second).\nDefaults to 0.3.",
                    "type": "Number"
                }
            ],
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 265,
            "description": "Stops the current asynchronous build.",
            "itemtype": "method",
            "name": "stopAsync",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 274,
            "description": "SpriteSheetBuilder instances cannot be cloned.",
            "itemtype": "method",
            "name": "clone",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 282,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 292,
            "itemtype": "method",
            "name": "_startBuild",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 329,
            "itemtype": "method",
            "name": "_fillRow",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The width & height of the row.",
                "type": "Number"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 340,
            "itemtype": "method",
            "name": "_fillRow",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The width & height of the row.",
                "type": "Number"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 372,
            "itemtype": "method",
            "name": "_endBuild",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 382,
            "itemtype": "method",
            "name": "_run",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 400,
            "itemtype": "method",
            "name": "_drawNext",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "Boolean Returns false if this is the last draw."
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetUtils.js",
            "line": 44,
            "itemtype": "property",
            "name": "_workingCanvas",
            "static": 1,
            "type": "HTMLCanvasElement",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetUtils.js",
            "line": 52,
            "itemtype": "property",
            "name": "_workingContext",
            "static": 1,
            "type": "CanvasRenderingContext2D",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetUtils.js",
            "line": 61,
            "description": "<b>This is an experimental method, and is likely to be buggy. Please report issues.</b><br/><br/>\nExtends the existing sprite sheet by flipping the original frames either horizontally, vertically, or both,\nand adding appropriate animation & frame data.",
            "itemtype": "method",
            "name": "flip",
            "static": 1,
            "params": [
                {
                    "name": "spriteSheet",
                    "description": "The sprite sheet to use as the source.",
                    "type": "Image"
                },
                {
                    "name": "flipData",
                    "description": "A generic object that specifies which frames will be flipped, what to name the\nflipped result, and how to flip the frames (horizontally, vertically, or both). Each property name\nindicates the name of a new sequence to create, and should reference an array where the first index is\nthe name of the original sequence to flip, the second index indicates whether to flip it horizontally,\nthe third index indicates whether to flip it vertically, and the fourth indicates what the \"next\" value\nfor the resulting frame data should be. For example, the following would create a new sequence named\n\"walk_left\" consisting of the frames from the original \"walk_right\" sequence flipped\nhorizontally: &#123;walk_left: [\"walk_right\", true, false]&#125;",
                    "type": "Object"
                }
            ],
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetUtils.js",
            "line": 86,
            "description": "Returns a single frame of the specified sprite sheet as a new PNG image.",
            "itemtype": "method",
            "name": "extractFrame",
            "static": 1,
            "params": [
                {
                    "name": "spriteSheet",
                    "description": "The SpriteSheet instance to extract a frame from.",
                    "type": "Image"
                },
                {
                    "name": "frame",
                    "description": "The frame number or animation name to extract. If an animation\nname is specified, only the first frame of the animation will be extracted.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a single frame of the specified sprite sheet as a new PNG image.",
                "type": "Image"
            },
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 46,
            "description": "Indicates whether Ticker should use requestAnimationFrame if it is supported in the browser. If false, Ticker\nwill use setTimeout. If you change this value, you must call setInterval or setFPS to reinitialize the Ticker.",
            "itemtype": "property",
            "name": "useRAF",
            "static": 1,
            "type": "Boolean",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 55,
            "description": "Specifies the animation target to use with requestAnimationFrame if useRAF is true.",
            "itemtype": "property",
            "name": "animationTarget",
            "static": 1,
            "type": "Object",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 63,
            "description": "Event broadcast  once each tick / interval. The interval is specified via the \n.setInterval(ms) or setFPS methods.",
            "itemtype": "event",
            "name": "tick",
            "params": [
                {
                    "name": "timeElapsed",
                    "description": "The time elapsed in milliseconds since the last tick event.",
                    "type": "Number"
                }
            ],
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 73,
            "itemtype": "property",
            "name": "_listeners",
            "type": "Array[Object]",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 80,
            "itemtype": "property",
            "name": "_pauseable",
            "type": "Array[Boolean]",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 87,
            "itemtype": "property",
            "name": "_paused",
            "type": "Boolean",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 94,
            "itemtype": "property",
            "name": "_inited",
            "type": "Boolean",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 101,
            "itemtype": "property",
            "name": "_startTime",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 108,
            "itemtype": "property",
            "name": "_pausedTime",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 115,
            "description": "Number of ticks that have passed",
            "itemtype": "property",
            "name": "_ticks",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 123,
            "description": "Number of ticks that have passed while Ticker has been paused",
            "itemtype": "property",
            "name": "_pausedTickers",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 131,
            "itemtype": "property",
            "name": "_interval",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 138,
            "itemtype": "property",
            "name": "_lastTime",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 145,
            "itemtype": "property",
            "name": "_times",
            "type": "Array[Number]",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 152,
            "itemtype": "property",
            "name": "_tickTimes",
            "type": "Array[Number]",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 159,
            "itemtype": "property",
            "name": "_rafActive",
            "type": "Boolean",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 166,
            "itemtype": "property",
            "name": "_timeoutID",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 175,
            "description": "Adds a listener for the tick event. The listener must be either an object exposing a .tick() method,\nor a function. The listener will be called once each tick / interval. The interval is specified via the \n.setInterval(ms) method.\nThe tick method or function is passed two parameters: the elapsed time between the \nprevious tick and the current one, and a boolean indicating whether Ticker is paused.",
            "itemtype": "method",
            "name": "addListener",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "The object or function to add as a listener.",
                    "type": "Object"
                },
                {
                    "name": "pauseable",
                    "description": "If false, the listener will continue to have tick called \neven when Ticker is paused via Ticker.pause(). Default is true.",
                    "type": "Boolean"
                }
            ],
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 195,
            "description": "Initializes or resets the timer, clearing all associated listeners and fps measuring data, starting the tick.\nThis is called automatically when the first listener is added.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 211,
            "description": "Removes the specified listener.",
            "itemtype": "method",
            "name": "removeListener",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "The object or function to remove from listening from the tick event.",
                    "type": "Object"
                }
            ],
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 226,
            "description": "Removes all listeners.",
            "itemtype": "method",
            "name": "removeAllListeners",
            "static": 1,
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 236,
            "description": "Sets the target time (in milliseconds) between ticks. Default is 50 (20 FPS).\nNote actual time between ticks may be more than requested depending on CPU load.",
            "itemtype": "method",
            "name": "setInterval",
            "static": 1,
            "params": [
                {
                    "name": "interval",
                    "description": "Time in milliseconds between ticks. Default value is 50.",
                    "type": "Number"
                }
            ],
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 249,
            "description": "Returns the current target time between ticks, as set with setInterval.",
            "itemtype": "method",
            "name": "getInterval",
            "static": 1,
            "return": {
                "description": "The current target interval in milliseconds between tick events.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 259,
            "description": "Sets the target frame rate in frames per second (FPS). For example, with an interval of 40, getFPS() will \nreturn 25 (1000ms per second divided by 40 ms per tick = 25fps).",
            "itemtype": "method",
            "name": "setFPS",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "Target number of ticks broadcast per second.",
                    "type": "Number"
                }
            ],
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 270,
            "description": "Returns the target frame rate in frames per second (FPS). For example, with an \ninterval of 40, getFPS() will return 25 (1000ms per second divided by 40 ms per tick = 25fps).",
            "itemtype": "method",
            "name": "getFPS",
            "static": 1,
            "return": {
                "description": "The current target number of frames / ticks broadcast per second.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 281,
            "description": "Returns the actual frames / ticks per second.",
            "itemtype": "method",
            "name": "getMeasuredFPS",
            "static": 1,
            "params": [
                {
                    "name": "ticks",
                    "description": "Optional. The number of previous ticks over which to measure the actual \nframes / ticks per second. Defaults to the number of ticks per second.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The actual frames / ticks per second. Depending on performance, this may differ\nfrom the target frames per second.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 299,
            "description": "While Ticker is paused, pausable listeners are not ticked. See addListener for more information.",
            "itemtype": "method",
            "name": "setPaused",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "Indicates whether to pause (true) or unpause (false) Ticker.",
                    "type": "Boolean"
                }
            ],
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 309,
            "description": "Returns a boolean indicating whether Ticker is currently paused, as set with setPaused.",
            "itemtype": "method",
            "name": "getPaused",
            "static": 1,
            "return": {
                "description": "Whether the Ticker is currently paused.",
                "type": "Boolean"
            },
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 319,
            "description": "Returns the number of milliseconds that have elapsed since the first tick event listener was added to\nTicker. For example, you could use this in a time synchronized animation to determine the exact amount of \ntime that has elapsed.",
            "itemtype": "method",
            "name": "getTime",
            "static": 1,
            "params": [
                {
                    "name": "pauseable",
                    "description": "Indicates whether to include time elapsed\nwhile Ticker was paused. If false only time elapsed while Ticker is not paused will be returned.\nIf true, the value returned will be total time elapsed since the first tick event listener was added.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Number of milliseconds that have elapsed since Ticker was begun.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 334,
            "description": "Returns the number of ticks that have been broadcast by Ticker.",
            "itemtype": "method",
            "name": "getTicks",
            "static": 1,
            "params": [
                {
                    "name": "pauseable",
                    "description": "Indicates whether to include ticks that would have been broadcast\nwhile Ticker was paused. If false only tick events broadcast while Ticker is not paused will be returned.\nIf true, tick events that would have been broadcast while Ticker was paused will be included in the return\nvalue. The default value is false.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "of ticks that have been broadcast.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 349,
            "itemtype": "method",
            "name": "_handleAF",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 361,
            "itemtype": "method",
            "name": "_handleTimeout",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 371,
            "itemtype": "method",
            "name": "_setupTick",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 388,
            "itemtype": "method",
            "name": "_tick",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/Ticker.js",
            "line": 422,
            "itemtype": "method",
            "name": "_getTime",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/UID.js",
            "line": 41,
            "itemtype": "property",
            "name": "_nextID",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "UID",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/UID.js",
            "line": 48,
            "description": "Returns the next unique id.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "The next unique id",
                "type": "Number"
            },
            "static": 1,
            "class": "UID",
            "module": "EaselJS"
        },
        {
            "file": "example.js",
            "line": 16,
            "description": "Specifies a function to call whenever any animation reaches its end. It will be called with two\nparams: the first will be a reference to this instance, the second will be the name of the animation\nthat just ended.",
            "itemtype": "property",
            "name": "onAnimationEnd",
            "type": "Function",
            "class": "FBBitmapAnimation",
            "module": "EaselJS"
        },
        {
            "file": "example.js",
            "line": 25,
            "description": "The frame that will be drawn when draw is called. Note that with some SpriteSheet data, this\nwill advance non-sequentially. READ-ONLY.",
            "itemtype": "property",
            "name": "currentFrame",
            "type": "Number",
            "default": "-1",
            "class": "FBBitmapAnimation",
            "module": "EaselJS"
        },
        {
            "file": "example.js",
            "line": 34,
            "description": "Returns the currently playing animation. READ-ONLY.",
            "itemtype": "property",
            "name": "currentAnimation",
            "type": "String",
            "final": 1,
            "class": "FBBitmapAnimation",
            "module": "EaselJS"
        }
    ]
}